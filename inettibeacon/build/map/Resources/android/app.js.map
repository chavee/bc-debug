{"version":3,"sources":["C:\\Users\\5610110106\\AppData\\Roaming\\npm\\node_modules\\alloy\\Alloy\\template\\app.js","app\\alloy.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AD/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"d:\\GIANT\\ww2\\inettibeacon/Resources\\android\\app.js","sourceRoot":"d:\\GIANT\\ww2\\inettibeacon","sourcesContent":["/**\n * Alloy for Titanium by Appcelerator\n * This is generated code, DO NOT MODIFY - changes will be lost!\n * Copyright (c) 2012 by Appcelerator, Inc.\n */\nvar Alloy = require('/alloy'),\n\t_ = Alloy._,\n\tBackbone = Alloy.Backbone;\n\n// The globals should be configured by the bootstrap script, however if anyone is using an SDK\n// older than 7.5.0 that won't get ran. So set them here if they don't exist\nif (!global.Alloy) {\n\tglobal.Alloy = Alloy;\n\tglobal._ = _;\n\tglobal.Backbone = Backbone;\n}\n\n__MAPMARKER_ALLOY_JS__\n\n// Open root window if a new UI session has started. Can happen more than once in app's lifetime.\n// Event can only be fired if \"tiapp.xml\" property \"run-in-background\" is set true.\nTi.UI.addEventListener('sessionbegin', function () {\n\tAlloy.createController('index');\n});\n\n// Open the root window immediately if an active UI session exists on startup.\n// Note: The Ti.UI.hasSession property was added as of Titanium 9.1.0.\nif ((typeof Ti.UI.hasSession === 'undefined') || Ti.UI.hasSession) {\n\tAlloy.createController('index');\n}\n","// The contents of this file will be executed before any of\r\n// your view controllers are ever executed, including the index.\r\n// You have access to all functionality on the `Alloy` namespace.\r\n//\r\n// This is a great place to do any initialization for your app\r\n// or create any global variables/functions that you'd like to\r\n// make available throughout your app. You can easily make things\r\n// accessible globally by attaching them to the `Alloy.Globals`\r\n// object. For example:\r\n//\r\n// Alloy.Globals.someGlobalFunction = function(){};\r\n\r\n// added during app creation. this will automatically login to\r\n// ACS for your application and then fire an event (see below)\r\n// when connected or errored. if you do not use ACS in your\r\n// application as a client, you should remove this block\r\n(function () {\r\n\tconst ACS = require('ti.cloud');\r\n\tconst env = Ti.App.deployType.toLowerCase() === 'production' ? 'production' : 'development';\r\n\tconst username = Ti.App.Properties.getString(`acs-username-${env}`);\r\n\tconst password = Ti.App.Properties.getString(`acs-password-${env}`);\r\n\r\n\t// if not configured, just return\r\n\tif (!env || !username || !password) {\r\n\t\treturn;\r\n\t}\r\n\t/**\r\n\t * Appcelerator Cloud (ACS) Admin User Login Logic\r\n\t *\r\n\t * fires login.success with the user as argument on success\r\n\t * fires login.failed with the result as argument on error\r\n\t */\r\n\tACS.Users.login({\r\n\t\tlogin: username,\r\n\t\tpassword: password,\r\n\t}, function (result) {\r\n\t\tif (env === 'development') {\r\n\t\t\tTi.API.info(`ACS Login Results for environment ${env}`);\r\n\t\t\tTi.API.info(result);\r\n\t\t}\r\n\t\tif (result && result.success && result.users && result.users.length) {\r\n\t\t\tTi.App.fireEvent('login.success', result.users[0], env);\r\n\t\t} else {\r\n\t\t\tTi.App.fireEvent('login.failed', result, env);\r\n\t\t}\r\n\t});\r\n\r\n}());\r\n\r\n"]}