{"version":3,"sources":["template.js","app\\controllers\\inet_beacon\\beacon.js"],"names":[],"mappingsdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"d:\\GIANT\\ww2\\bc-debug\\inettibeacon\\Resources\\android\\alloy\\controllers\\inet_beacon\\beacon.js","sourceRoot":"d:\\GIANT\\ww2\\bc-debug\\inettibeacon","sourcesContent":["var Alloy = require('/alloy'),\n\tBackbone = Alloy.Backbone,\n\t_ = Alloy._;\n\n\n\n\nfunction __processArg(obj, key) {\n\tvar arg = null;\n\tif (obj) {\n\t\targ = obj[key] || null;\n\t}\n\treturn arg;\n}\n\nfunction Controller() {\n\t\n\trequire('/alloy/controllers/' + 'BaseController').apply(this, Array.prototype.slice.call(arguments));\n\tthis.__controllerPath = 'inet_beacon/beacon';\n\tthis.args = arguments[0] || {};\n\n\tif (arguments[0]) {\n\t\tvar __parentSymbol = __processArg(arguments[0], '__parentSymbol');\n\t\tvar $model = __processArg(arguments[0], '$model');\n\t\tvar __itemTemplate = __processArg(arguments[0], '__itemTemplate');\n\t}\n\tvar $ = this;\n\tvar exports = {};\n\tvar __defers = {};\n\n\t// Generated code that must be executed before all UI and/or\n\t// controller code. One example is all model and collection\n\t// declarations from markup.\n\t\n\n\t// Generated UI code\n\texports.destroy = function () {};\n\n\t// make all IDed elements in $.__views available right on the $ in a\n\t// controller's internal code. Externally the IDed elements will\n\t// be accessed with getView().\n\t_.extend($, $.__views);\n\n\t// Controller code directly from the developer's controller file\n\t__MAPMARKER_CONTROLLER_CODE__\n\n\t// Generated code that must be executed after all UI and\n\t// controller code. One example deferred event handlers whose\n\t// functions are not defined until after the controller code\n\t// is executed.\n\t\n\n\t// Extend the $ instance with all functions and properties\n\t// defined on the exports object.\n\t_.extend($, exports);\n}\n\nmodule.exports = Controller;\n","// let beaconUUID = \"c8a94f42-3cd5-483a-8adc-97473197b8b4\";\nlet beaconUUID = \"5991e161-bb46-432f-9bd8-b271f76f67d9\";\nlet beaconIdentifier = \"Morprom\";\nlet global_beacons = {};\n\nTi.App.Properties.setString(\"f_beacon\", \"\");\n\nfunction resetStateBeacon() {\n  Ti.App.Properties.setString(\"inetBeaconData_major\", null);\n  Ti.App.Properties.setString(\"inetBeaconData_minor\", null);\n  Ti.App.Properties.setString(\"inetBeaconData_uuid\", null);\n}\nfunction setStateBeacon(uuid, minor, major) {\n  Ti.App.Properties.setString(\"inetBeaconData_major\", major);\n  Ti.App.Properties.setString(\"inetBeaconData_minor\", minor);\n  Ti.App.Properties.setString(\"inetBeaconData_uuid\", uuid);\n}\nfunction isSameStateBefore(uuid, minor, major) {\n  if (\n  uuid == Ti.App.Properties.getString(\"inetBeaconData_uuid\") &&\n  major == Ti.App.Properties.getString(\"inetBeaconData_major\") &&\n  minor == Ti.App.Properties.getString(\"inetBeaconData_minor\"))\n  {\n    return true;\n  }\n  return false;\n}\n\nconsole.log(\"begin:\", Math.floor(Date.now()));\nvar BLE = null;\n// var androidPlatformTools = require('bencoding.android.tools').createPlatform();\nvar isForeground = true;\n\nif (OS_IOS)\n{\n  BLE = require(\"appcelerator.ble\");\n} else\n{\n  BLE = require(\"com.liferay.beacons\");\n}\n\nfunction isInterestedRegion(rssi)\n{\n  tag = \"isInterestRegion:\";\n  let min_rssi = -96;\n  if (OS_IOS)\n  {\n    // interested all\n    return true;\n  } else\n\n  {\n    if (rssi <= min_rssi)\n    {\n      // not interested region\n      return false;\n    } else\n\n    {\n      // interested region\n      return true;\n    }\n  }\n}\n\nconsole.log(\"after lode lib:\", Math.floor(Date.now()));\n// --- ios ----------\nvar manager = null;\nvar iosDidRangeBeacons = null;\nvar iosDidChangeAuthorization = null;\n// --- android ----------\nvar inBeconRange = null;\n\nfunction beaconStartScan() {\n  resetStateBeacon();\n  if (OS_IOS) {\n    // -------- IOS -----------------------\n    iosDidChangeAuthorization = (e) => {\n      Ti.API.info(\"didChangeAuthorization\");\n      switch (e.state) {\n        case BLE.LOCATION_MANAGER_AUTHORIZATION_STATUS_AUTHORIZED_ALWAYS:\n          alert(\"Manager authorization is always\");\n          break;\n        case BLE.LOCATION_MANAGER_AUTHORIZATION_STATUS_AUTHORIZED_WHEN_IN_USE:\n          alert(\"Manager authorization is when in use\");\n          break;\n        case BLE.LOCATION_MANAGER_AUTHORIZATION_STATUS_DENIED:\n          alert(\"Manager authorization is denied\");\n          break;\n        case BLE.LOCATION_MANAGER_AUTHORIZATION_STATUS_NOT_DETERMINED:\n          alert(\"Manager authorization is not determined\");\n          break;\n        case BLE.LOCATION_MANAGER_AUTHORIZATION_STATUS_RESTRICTED:\n          alert(\"Manager authorization is powered restricted\");\n          break;\n        default:\n          alert(\"Unknown\");\n          break;}\n\n    };\n\n    iosDidRangeBeacons = (e) => {\n      Ti.API.info(\"didRangeBeacons\");\n      var becaons = e.beacons;\n\n\n      if (becaons.length === 0) {\n        console.log(\"No beacon in range\");\n        if (Ti.App.Properties.getString(\"inetBeaconData_uuid\") !== null) {\n          alert(\n          \"Exit uuid: \" +\n          Ti.App.Properties.getString(\"inetBeaconData_uuid\") +\n          \"  Major: \" +\n          Ti.App.Properties.getString(\"inetBeaconData_major\") +\n          \"  Minor: \" +\n          Ti.App.Properties.getString(\"inetBeaconData_minor\"));\n\n          resetStateBeacon();\n        }\n        return;\n      }\n\n      var proximity = becaons[0].proximity;\n      var accuracy = becaons[0].accuracy;\n      var major = becaons[0].major;\n      var minor = becaons[0].minor;\n      var haveCase = true;\n\n      // check state before\n\n      if (!isInterestedRegion(proximity))\n      {\n        console.log(\"Too far...\");\n      }\n      if (isSameStateBefore(e.region.uuid, major, minor)) {\n        return;\n      }\n\n      switch (proximity) {\n        case BLE.BEACON_PROXIMITY_UNKNOWN:\n          alert(\"Beacon Location : UNKNOWN\");\n          break;\n\n        case BLE.BEACON_PROXIMITY_IMMEDIATE:\n          // set beacon state only, but not use proximity\n          setStateBeacon(e.region.uuid, major, minor);\n          console.log(e.region.uuid + \" Major: \" + major + \" Minor: \" + minor);\n          alert(\n          \"IMMEDIATE uuid: \" +\n          e.region.uuid +\n          \"  Major: \" +\n          major +\n          \"  Minor: \" +\n          minor +\n          \"  Approx: \" +\n          accuracy +\n          \"m)\");\n\n          break;\n\n        case BLE.BEACON_PROXIMITY_NEAR:\n          setStateBeacon(e.region.uuid, major, minor);\n          console.log(e.region.uuid + \" Major: \" + major + \" Minor: \" + minor);\n          alert(\n          \"NEAR uuid: \" +\n          e.region.uuid +\n          \"  Major: \" +\n          major +\n          \"  Minor: \" +\n          minor +\n          \"  Approx: \" +\n          accuracy +\n          \"m)\");\n\n          break;\n\n        case BLE.BEACON_PROXIMITY_FAR:\n          setStateBeacon(e.region.uuid, major, minor);\n          console.log(e.region.uuid + \" Major: \" + major + \" Minor: \" + minor);\n          alert(\n          \"FAR uuid: \" +\n          e.region.uuid +\n          \"  Major: \" +\n          major +\n          \"  Minor: \" +\n          minor +\n          \"  Approx: \" +\n          accuracy +\n          \"m)\");\n\n          break;\n\n        default:\n          haveCase = false;\n          alert(\"Beacon Location : UNKNOWN\");\n          break;}\n\n\n      if (haveCase) {\n        // putApi(major, minor);\n        // ..record beacon\n      }\n\n    };\n\n    if (manager === null) {\n      manager = BLE.createRegionManager();\n      manager.addEventListener(\n      \"didChangeAuthorization\",\n      iosDidChangeAuthorization);\n\n      manager.addEventListener(\"didRangeBeacons\", iosDidRangeBeacons);\n\n      var beaconRegion = BLE.createBeaconRegion({\n        uuid: beaconUUID,\n        // major: 32772,\n        // minor: 3,\n        identifier: beaconIdentifier });\n\n      manager.startRegionMonitoring({\n        beaconRegion: beaconRegion });\n\n      manager.startRangingBeaconsInRegion({\n        beaconRegion: beaconRegion });\n\n    }\n\n  } else {\n    // -------- Android -----------------------\n    // Check Permission Location\n    var permissions = [\"android.permission.ACCESS_FINE_LOCATION\"];\n    Ti.Android.requestPermissions(permissions, function (e) {\n      if (e.success) {\n        console.log(\"allow location success\");\n      } else {\n        console.log(\"not allow location\");\n      }\n    });\n\n    console.log(\"after check perm:\", Math.floor(Date.now()));\n\n    androidBindingCallback = function (e) {\n      tag = \"androidBindingCallback: \";\n      console.log(tag, e);\n    };\n\n    inBeconRange = function (e) {\n      var tag = \"beaconRanges: \";\n      console.log(tag, \"I am in the \" + e.identifier + \" region\");\n      console.log(tag, \"I see \" + e.beacons.length + \" beacons in this region:\");\n      console.log(tag, \"----------------\");\n      e.beacons.forEach(function (beacon, index) {\n        // ... check rssi add to dialog\n        // if not interestedRegion(rssi) ... not add to checkin dialog\n        console.log(tag, \"Beacon number: \" + index);\n        console.log(tag, \"uuid: \" + beacon.uuid);\n        console.log(tag, \"major: \" + beacon.major);\n        console.log(tag, \"minor: \" + beacon.minor);\n        console.log(tag, \"proximity: \" + beacon.proximity);\n        console.log(tag, \"accuracy: \" + beacon.accuracy);\n        console.log(tag, \"rssi: \" + beacon.rssi);\n        console.log(tag, \"power: \" + beacon.power);\n        console.log(\"----------------\");\n        // .. do others ....\n        var beacon_key = beacon.major + \"-\" + beacon.minor;\n        if (beacon_key in global_beacons)\n        {\n          console.log(beacon_key + \" beacon was recorded\");\n        } else\n\n        {\n          if (isInterestedRegion(beacon.rssi))\n          {\n            console.log(tag, \"call location api\");\n            global_beacons[beacon_key] = {\n              \"major\": beacon.major,\n              \"minor\": beacon.minor,\n              \"rssi\": beacon.rssi,\n              \"location\": \"กำลังค้นหาตำแหน่ง\",\n              \"isRegistered\": false,\n              \"ts\": new Date().getTime() };\n\n            // call locatioon api\n            getLocation(beacon.major, beacon.minor, beacon_key);\n          } else\n\n          {\n            console.log(\"Not interesed region.\");\n          }\n        }\n      });\n    };\n\n    BLE.addEventListener(\"beaconRanges\", inBeconRange);\n\n    var regionState = function (e) {\n      var tag = \"regionState: \";\n      console.log(tag, \"identifer: \" + e.regionState);\n    };\n\n    BLE.addEventListener(\"onIBeaconServiceConnect\", androidBindingCallback);\n\n    console.log(\"add evnt complete:\", Math.floor(Date.now()));\n\n    var when_ready;\n    var not_ready_count = 0;\n\n    BLE.bindBeaconService();\n\n    when_ready = setInterval(function () {\n      if (!BLE.isReady())\n      {\n        console.log(\"not_ready_count=\", not_ready_count);\n        console.log(\"BLE Not ready\");\n        not_ready_count++;\n        return;\n      }\n\n      Ti.API.info(\"Try\", not_ready_count, \"time, \", \"Okay! Module is ready!\");\n\n      // console.log(\"checkAvailability=\", BLE.checkAvailability());\n      if (!BLE.checkAvailability())\n      {\n        alert(\"It's not support in your device!\");\n        return;\n      }\n\n      BLE.setBackgroundMode(false);\n      BLE.setScanPeriods({\n        foregroundScanPeriod: 5000,\n        foregroundBetweenScanPeriod: 200,\n        backgroundScanPeriod: 5000,\n        backgroundBetweenScanPeriod: 200 });\n\n\n      BLE.startMonitoringForRegion({\n        identifier: beaconIdentifier,\n        uuid: beaconUUID });\n\n\n      clearInterval(when_ready);\n      when_ready = null;\n    }, 1000);\n\n    var monit;\n\n    monit = setInterval(function () {\n      // var isForeground = androidPlatformTools.isInForeground();\n      if (!isForeground) {\n        console.log(\"App in background. Stop scan.\");\n        BLE.stopScan();\n        return;\n      }\n    });\n    // end android\n  }\n}\n\nvar clearBCCache = setInterval(function () {\n  var tag = \"timeToClearBCCach?: \";\n  for (var prop in global_beacons) {\n    console.log(tag + global_beacons[prop][\"location\"] + \" ts=\" + global_beacons[prop][\"ts\"] + \" ms\");\n    if (new Date().getTime() - global_beacons[prop][\"ts\"] > 5 * 60 * 1000)\n    {\n      console.log(\"Yes, clear beacon cache.\");\n      delete global_beacons[prop];\n    } else\n\n    {\n      console.log(tag + \"No.\");\n    }\n  }\n}, 5000);\n\nfunction beaconStopScan() {\n  resetStateBeacon();\n  if (OS_IOS) {\n    manager.removeEventListener(\n    \"didChangeAuthorization\",\n    iosDidChangeAuthorization);\n\n    manager.removeEventListener(\"didRangeBeacons\", iosDidRangeBeacons);\n  } else {\n    BLE.stopMonitoringAllRegions();\n    BLE.removeEventListener(\"beaconRanges\", inBeconRange);\n  }\n}\n\nfunction getLocation(this_major, this_minor, this_key) {\n  tag = \"getLocation: \";\n  var xhr = Ti.Network.createHTTPClient();\n  // hash_value\n  var my_loc_code = md5_hash(`b1cf4b7ec203:1:${this_major}:${this_minor}`);\n  console.log(tag + \"my_hash: \" + my_loc_code + \" major:\" + this_major + \" minor:\" + this_minor);\n\n  xhr.onload = function (e) {\n    var res_json = {};\n    console.log(tag, this.status);\n    console.log(tag, this.responseText);\n    // alert(tag + this.responseText);\n    res_json = JSON.parse(this.responseText);\n    global_beacons[this_key][\"isRegistered\"] = true;\n    console.log(tag, \"res_json=\", res_json);\n    if (\"site_name\" in res_json)\n    {\n      global_beacons[this_key][\"location\"] = res_json[\"site_name\"];\n    } else\n\n    {\n      global_beacons[this_key][\"location\"] = \"-\";\n    }\n    if (\"location_name\" in res_json)\n    {\n      global_beacons[this_key][\"location\"] = global_beacons[this_key][\"location\"] + \" \" + res_json[\"location_name\"];\n    }\n    alert(tag + this_key + \":\" + global_beacons[this_key][\"location\"]);\n  };\n\n  xhr.onerror = function (e) {\n    console.log(tag, this.status);\n    console.log(tag, this.responseText);\n    if (this.status = 404)\n    {\n      global_beacons[this_key][\"location\"] = `ไม่พบตำแหน่ง ${global_beacons[this_key][\"major\"]}/${global_beacons[this_key][\"major\"]} ในระบบ`;\n    } else\n\n    {\n      global_beacons[this_key][\"location\"] = \"กรุณาลองใหม่\";\n    }\n  };\n  xhr.timeout = 10000;\n  xhr.open('GET', 'https://beacon-track.inet.co.th/beaconinfo?code=' + my_loc_code);\n  xhr.setRequestHeader(\"content-type\", \"application/json\");\n  xhr.send();\n}\n\nfunction sortByProperty(property) {\n  var tag = \"sortByProp: \";\n  return function (a, b) {\n    if (a[property] > b[property])\n    {\n      // alert(a[\"location\"] + \" \" + a[property] + \">\" + b[\"location\"] + \" \" + b[property]);\n      console.log(a[\"location\"] + \" \" + a[property] + \">\" + b[\"location\"] + \" \" + b[property]);\n      return -1;\n    } else\n    if (a[property] < b[property])\n    {\n      // alert(a[\"location\"] + \" \" + a[property] + \"<\" + b[\"location\"] + \" \" + b[property]);\n      console.log(a[\"location\"] + \" \" + a[property] + \"<\" + b[\"location\"] + \" \" + b[property]);\n      return 1;\n    }\n    return 0;\n  };\n}\n\nfunction getLocationList()\n{\n  var tag = \"getLocationList: \";\n  var global_location = [];\n  var location_list = \"\";\n  // create arr of json of locations, filter only registered device\n\n  for (var prop in global_beacons) {\n    console.log(tag, \"beacon \", global_beacons[prop]);\n    // brinng registered region first!\n    if (global_beacons[prop][\"isRegistered\"])\n    {\n      // add to location list\n      global_location.push(global_beacons[prop]);\n    }\n  }\n\n  // check number of location is less than 0\n\n  /*\r\n  var max_location = 3;\r\n  if((global_beacons.length > global_location.length) && (global_location < max_location)) \r\n  {\r\n    // add non registered beacon for show\r\n    for(var prop in global_beacons) {\r\n      if(! global_beacons[prop][\"isRegistered\"])\r\n      {\r\n        global_location.push(global_beacons[prop]);\r\n      }\r\n      \r\n      if(global_location.length >= max_location)\r\n      {\r\n        console.log(tag, \"location reach limit=\", max_location);\r\n        // sorting by rssi  getSortOrder(prop)\r\n        global_sorting_loc = global_location.sort(getSortOrder[\"rssi\"]);\r\n        global_sorting_loc.forEach(function(loc_list, index){\r\n          console.log(tag, \"sorted_loc=\", loc_list);\r\n          location_list = location_list + loc_list[\"major\"] + \"-\" + loc_list[\"minor\"] + \r\n          \":\" + loc_list[\"location\"] + \" \" + loc_list[\"rssi\"] + \"dBm\" + \"; \";\r\n        });\r\n        alert(tag + location_list);\r\n        return global_sorting_loc;\r\n      }\r\n    }\r\n  }\r\n  */\n\n  console.log(tag, \"global_location=\", global_location);\n  global_location.sort(sortByProperty(\"rssi\"));\n  global_location.forEach(function (sort_loc, index) {\n    console.log(tag, \"### sort_id=\", index, \"data=\", sort_loc);\n    location_list = location_list + sort_loc[\"location\"] + \" major=\" + sort_loc[\"major\"] + \" minor=\" + sort_loc[\"minor\"] +\n    \" rssi=\" + sort_loc[\"rssi\"] + \"; \";\n  });\n  alert(tag + \"sorted_loc=\" + location_list);\n  return global_location;\n}\n\nfunction md5_hash(hash_seed) {\n  var tag = \"md5_hash\";\n  var my_md5 = Ti.Utils.md5HexDigest(hash_seed);\n  return my_md5;\n}\n\nexports.beaconStartScan = beaconStartScan;\nexports.beaconStopScan = beaconStopScan;\nexports.getLocationList = getLocationList;"]}