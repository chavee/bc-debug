{"version":3,"sources":["template.js","app\\controllers\\inet_beacon\\beacon.js"],"names":[],"mappingsfile":"d:\\GIANT\\ww2\\inettibeacon/Resources\\android\\alloy\\controllers\\inet_beacon\\beacon.js","sourceRoot":"d:\\GIANT\\ww2\\inettibeacon","sourcesContent":["var Alloy = require('/alloy'),\n\tBackbone = Alloy.Backbone,\n\t_ = Alloy._;\n\n\n\n\nfunction __processArg(obj, key) {\n\tvar arg = null;\n\tif (obj) {\n\t\targ = obj[key] || null;\n\t}\n\treturn arg;\n}\n\nfunction Controller() {\n\t\n\trequire('/alloy/controllers/' + 'BaseController').apply(this, Array.prototype.slice.call(arguments));\n\tthis.__controllerPath = 'inet_beacon/beacon';\n\tthis.args = arguments[0] || {};\n\n\tif (arguments[0]) {\n\t\tvar __parentSymbol = __processArg(arguments[0], '__parentSymbol');\n\t\tvar $model = __processArg(arguments[0], '$model');\n\t\tvar __itemTemplate = __processArg(arguments[0], '__itemTemplate');\n\t}\n\tvar $ = this;\n\tvar exports = {};\n\tvar __defers = {};\n\n\t// Generated code that must be executed before all UI and/or\n\t// controller code. One example is all model and collection\n\t// declarations from markup.\n\t\n\n\t// Generated UI code\n\texports.destroy = function () {};\n\n\t// make all IDed elements in $.__views available right on the $ in a\n\t// controller's internal code. Externally the IDed elements will\n\t// be accessed with getView().\n\t_.extend($, $.__views);\n\n\t// Controller code directly from the developer's controller file\n\t__MAPMARKER_CONTROLLER_CODE__\n\n\t// Generated code that must be executed after all UI and\n\t// controller code. One example deferred event handlers whose\n\t// functions are not defined until after the controller code\n\t// is executed.\n\t\n\n\t// Extend the $ instance with all functions and properties\n\t// defined on the exports object.\n\t_.extend($, exports);\n}\n\nmodule.exports = Controller;\n","// let beaconUUID = \"c8a94f42-3cd5-483a-8adc-97473197b8b4\";\nlet beaconUUID = \"5991e161-bb46-432f-9bd8-b271f76f67d9\";\nlet beaconIdentifier = \"MyHome\";\n\nfunction resetStateBeacon() {\n  Ti.App.Properties.setString(\"inetBeaconData_major\", null);\n  Ti.App.Properties.setString(\"inetBeaconData_minor\", null);\n  Ti.App.Properties.setString(\"inetBeaconData_uuid\", null);\n}\nfunction setStateBeacon(uuid, minor, major) {\n  Ti.App.Properties.setString(\"inetBeaconData_major\", major);\n  Ti.App.Properties.setString(\"inetBeaconData_minor\", minor);\n  Ti.App.Properties.setString(\"inetBeaconData_uuid\", uuid);\n}\nfunction isSameStateBefore(uuid, minor, major) {\n  if (\n  uuid == Ti.App.Properties.getString(\"inetBeaconData_uuid\") &&\n  major == Ti.App.Properties.getString(\"inetBeaconData_major\") &&\n  minor == Ti.App.Properties.getString(\"inetBeaconData_minor\"))\n  {\n    return true;\n  }\n  return false;\n}\n\nvar BLE = null;\nif (OS_IOS) {\n  BLE = require(\"appcelerator.ble\");\n} else {\n  BLE = require(\"com.liferay.beacons\");\n}\n// --- ios ----------\nvar manager = null;\nvar iosDidRangeBeacons = null;\nvar iosDidChangeAuthorization = null;\n// --- android ----------\nvar androidEntered = null;\nvar androidExited = null;\nvar androidBeaconProximityCallback = null;\n\nfunction beaconStartScan() {\n  resetStateBeacon();\n  if (OS_IOS) {\n    // -------- IOS -----------------------\n    iosDidChangeAuthorization = (e) => {\n      Ti.API.info(\"didChangeAuthorization\");\n      switch (e.state) {\n        case BLE.LOCATION_MANAGER_AUTHORIZATION_STATUS_AUTHORIZED_ALWAYS:\n          alert(\"Manager authorization is always\");\n          break;\n        case BLE.LOCATION_MANAGER_AUTHORIZATION_STATUS_AUTHORIZED_WHEN_IN_USE:\n          alert(\"Manager authorization is when in use\");\n          break;\n        case BLE.LOCATION_MANAGER_AUTHORIZATION_STATUS_DENIED:\n          alert(\"Manager authorization is denied\");\n          break;\n        case BLE.LOCATION_MANAGER_AUTHORIZATION_STATUS_NOT_DETERMINED:\n          alert(\"Manager authorization is not determined\");\n          break;\n        case BLE.LOCATION_MANAGER_AUTHORIZATION_STATUS_RESTRICTED:\n          alert(\"Manager authorization is powered restricted\");\n          break;\n        default:\n          alert(\"Unknown\");\n          break;}\n\n    };\n\n    iosDidRangeBeacons = (e) => {\n\n      Ti.API.info(\"didRangeBeacons\");\n      var becaons = e.beacons;\n\n      if (becaons.length === 0) {\n        console.log(\"No beacon in range\");\n        if (Ti.App.Properties.getString(\"inetBeaconData_uuid\") !== null) {\n          alert(\n          \"Exit uuid: \" +\n          Ti.App.Properties.getString(\"inetBeaconData_uuid\") +\n          \"  Major: \" +\n          Ti.App.Properties.getString(\"inetBeaconData_major\") +\n          \"  Minor: \" +\n          Ti.App.Properties.getString(\"inetBeaconData_minor\"));\n\n          resetStateBeacon();\n        }\n        return;\n      }\n\n      var proximity = becaons[0].proximity;\n      var accuracy = becaons[0].accuracy;\n      var major = becaons[0].major;\n      var minor = becaons[0].minor;\n      var haveCase = true;\n\n      // check state before\n      if (isSameStateBefore(e.region.uuid, major, minor)) {\n        return;\n      }\n\n      switch (proximity) {\n        case BLE.BEACON_PROXIMITY_UNKNOWN:\n          alert(\"Beacon Location : UNKNOWN\");\n          break;\n\n        case BLE.BEACON_PROXIMITY_IMMEDIATE:\n          // set beacon state only, but not use proximity\n          setStateBeacon(e.region.uuid, major, minor);\n          console.log(e.region.uuid + \" Major: \" + major + \" Minor: \" + minor);\n          alert(\n          \"IMMEDIATE uuid: \" +\n          e.region.uuid +\n          \"  Major: \" +\n          major +\n          \"  Minor: \" +\n          minor +\n          \"  Approx: \" +\n          accuracy +\n          \"m)\");\n\n          break;\n\n        case BLE.BEACON_PROXIMITY_NEAR:\n          setStateBeacon(e.region.uuid, major, minor);\n          console.log(e.region.uuid + \" Major: \" + major + \" Minor: \" + minor);\n          alert(\n          \"NEAR uuid: \" +\n          e.region.uuid +\n          \"  Major: \" +\n          major +\n          \"  Minor: \" +\n          minor +\n          \"  Approx: \" +\n          accuracy +\n          \"m)\");\n\n          break;\n\n        case BLE.BEACON_PROXIMITY_FAR:\n          setStateBeacon(e.region.uuid, major, minor);\n          console.log(e.region.uuid + \" Major: \" + major + \" Minor: \" + minor);\n          alert(\n          \"FAR uuid: \" +\n          e.region.uuid +\n          \"  Major: \" +\n          major +\n          \"  Minor: \" +\n          minor +\n          \"  Approx: \" +\n          accuracy +\n          \"m)\");\n\n          break;\n\n        default:\n          haveCase = false;\n          alert(\"Beacon Location : UNKNOWN\");\n          break;}\n\n\n      if (haveCase) {\n        putApi(major, minor);\n      }\n\n    };\n\n    if (manager === null) {\n      manager = BLE.createRegionManager();\n      manager.addEventListener(\n      \"didChangeAuthorization\",\n      iosDidChangeAuthorization);\n\n      manager.addEventListener(\"didRangeBeacons\", iosDidRangeBeacons);\n\n      var beaconRegion = BLE.createBeaconRegion({\n        uuid: beaconUUID,\n        // major: 32772,\n        // minor: 3,\n        identifier: beaconIdentifier });\n\n      manager.startRegionMonitoring({\n        beaconRegion: beaconRegion });\n\n      manager.startRangingBeaconsInRegion({\n        beaconRegion: beaconRegion });\n\n    }\n\n  } else {\n    // -------- Android -----------------------\n    // Check Permission Location\n    var permissions = [\"android.permission.ACCESS_FINE_LOCATION\"];\n    Ti.Android.requestPermissions(permissions, function (e) {\n      if (e.success) {\n        console.log(\"allow location success\");\n      } else {\n        console.log(\"not allow location\");\n      }\n    });\n\n    //androidEntered callback\n    var isEnterRegion = false;\n    androidEntered = function (e) {\n      let tag = \"androidEntered:\";\n      console.log(tag, \"entered region identifer: \" + e.identifier);\n      console.log(tag, e);\n      isEnterRegion = true;\n      alert(\n      tag + \"Enter\");\n\n    };\n\n    //androidBeaconProximityCallback\n    androidBeaconProximityCallback = function (e) {\n      let tag = \"proxCallback:\";\n      if (isEnterRegion) {\n        // check is same state befor\n        if (isSameStateBefore(e.uuid, e.major, e.minor)) {\n          console.log(tag, \"Same beacon\");\n          isConfirmExit = false;\n          return;\n        }\n        // just record beacon, not use proximity\n        setStateBeacon(e.uuid, e.major, e.minor);\n        alert(\n        tag + \" \" + e.uuid + \" Major: \" + e.major + \" Minor: \" + e.minor);\n\n        //put message to bot\n        putApi(e.major, e.minor);\n        isEnterRegion = false;\n      }\n      console.log(tag, \"identifer: \" + e.identifier);\n      console.log(tag, \"uuid: \" + e.uuid);\n      console.log(tag, \"major: \" + e.major);\n      console.log(tag, \"minor: \" + e.minor);\n      console.log(tag, \"proximity: \" + e.proximity);\n      console.log(tag, \"accuracy: \" + e.accuracy);\n      console.log(tag, \"rssi: \" + e.rssi);\n      console.log(tag, \"power: \" + e.power);\n    };\n\n    //androidExited callback\n    var handle = null;\n    var isConfirmExit = false;\n    androidExited = function (e) {\n      isConfirmExit = true;\n      console.log(\"exited region identifer: \" + e.identifier);\n\n      if (Ti.App.Properties.getString(\"inetBeaconData_uuid\") !== null && handle == null) {\n        var countExit = 0;\n        handle = setInterval(function () {\n          console.log(\"isConfirmExit: \" + isConfirmExit);\n          if (countExit > 60 && isConfirmExit) {\n            // Confirm exited signal\n            alert(\n            \"Exit uuid: \" +\n            Ti.App.Properties.getString(\"inetBeaconData_uuid\") +\n            \"  Major: \" +\n            Ti.App.Properties.getString(\"inetBeaconData_major\") +\n            \"  Minor: \" +\n            Ti.App.Properties.getString(\"inetBeaconData_minor\"));\n\n            resetStateBeacon();\n            clearInterval(handle);\n            handle = null;\n            console.log(\"it's really exit \" + handle);\n          } else if (!isConfirmExit) {\n            // Reset Confirm Exit Interval\n            clearInterval(handle);\n            handle = null;\n            console.log(\"it's not exit \" + handle);\n          }\n          countExit++;\n          console.log(\"count: \" + countExit);\n          return;\n        }, 1000);\n      }\n    };\n\n    BLE.addEventListener(\"enteredRegion\", androidEntered);\n    BLE.addEventListener(\"exitedRegion\", androidExited);\n    BLE.addEventListener(\"beaconProximity\", androidBeaconProximityCallback);\n\n    // Airports Beacon\n    // UUID: 5991e161-bb46-432f-9bd8-b271f76f67d9\n\n    // MyHome\n    // c8a94f42-3cd5-483a-8adc-97473197b8b4\n    BLE.startMonitoringForRegion({\n      identifier: beaconIdentifier,\n      uuid: beaconUUID });\n\n    BLE.setBackgroundMode(false);\n\n    BLE.setScanPeriods({\n      foregroundScanPeriod: 5000,\n      foregroundBetweenScanPeriod: 200,\n      backgroundScanPeriod: 5000,\n      backgroundBetweenScanPeriod: 200 });\n\n    // end android\n  }\n}\n\nfunction beaconStopScan() {\n  resetStateBeacon();\n  if (OS_IOS) {\n    manager.removeEventListener(\n    \"didChangeAuthorization\",\n    iosDidChangeAuthorization);\n\n    manager.removeEventListener(\"didRangeBeacons\", iosDidRangeBeacons);\n  } else {\n    BLE.stopMonitoringAllRegions();\n    BLE.removeEventListener(\"enteredRegion\", androidEntered);\n    BLE.removeEventListener(\"exitedRegion\", androidExited);\n    BLE.removeEventListener(\"beaconProximity\", androidBeaconProximityCallback);\n  }\n}\n\nfunction putApi(major, minor) {\n  var xhr = Ti.Network.createHTTPClient();\n  xhr.onload = function (e) {\n    console.log(this.status);\n    console.log(this.responseText);\n  };\n  xhr.onerror = function (e) {\n    console.log(this.status);\n    console.log(this.responseText);\n  };\n  xhr.timeout = 10000;\n  // xhr.open('PUT','https://morprom-beacon.nexpie.io');\n  xhr.open('PUT', 'https://beacon-track.inet.co.th');\n  xhr.setRequestHeader('X-API-KEY', 'RvBmll9opEnVZ3aBH6wygN7VXKr7DIYw');\n  xhr.setRequestHeader(\"content-type\", \"application/json\");\n  var params = {\n    uid: Ti.App.Properties.getString(\"inetBeaconData_cid\"),\n    major: major,\n    minor: minor };\n\n  xhr.send(JSON.stringify(params));\n}\n\nexports.beaconStartScan = beaconStartScan;\nexports.beaconStopScan = beaconStopScan;\nexports.putApi = putApi;"]}