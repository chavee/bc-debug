var Alloy=require("/alloy"),
Backbone=Alloy.Backbone,
_=Alloy._;




function __processArg(obj,key){
var arg=null;



return obj&&(arg=obj[key]||null),arg;
}

function Controller(){var _Mathfloor=













































































































































































































































































Math.floor;function resetStateBeacon(){Ti.App.Properties.setString("inetBeaconData_major",null),Ti.App.Properties.setString("inetBeaconData_minor",null),Ti.App.Properties.setString("inetBeaconData_uuid",null)}function setStateBeacon(uuid,minor,major){Ti.App.Properties.setString("inetBeaconData_major",major),Ti.App.Properties.setString("inetBeaconData_minor",minor),Ti.App.Properties.setString("inetBeaconData_uuid",uuid)}function isSameStateBefore(uuid,minor,major){return uuid==Ti.App.Properties.getString("inetBeaconData_uuid")&&major==Ti.App.Properties.getString("inetBeaconData_major")&&minor==Ti.App.Properties.getString("inetBeaconData_minor")}function isInterestedRegion(rssi){tag="isInterestRegion:";let min_rssi=-96;return!(-96>=rssi)}function beaconStartScan(){if(resetStateBeacon(),!0){var permissions=["android.permission.ACCESS_FINE_LOCATION"];Ti.Android.requestPermissions(permissions,function(e){e.success?console.log("allow location success"):console.log("not allow location")}),console.log("after check perm:",_Mathfloor(Date.now()));


var isEnterRegion=!1;
androidEntered=function(e){
let tag="androidEntered:";
console.log("androidEntered:","entered region identifer: "+e.identifier),
console.log("androidEntered:",e),
isEnterRegion=!0,
alert("androidEntered:Enter");


},


androidBeaconProximityCallback=function(e){
let tag="proxCallback:";
if(isEnterRegion){












if(console.log(tag,"identifer: "+e.identifier),console.log(tag,"uuid: "+e.uuid),console.log(tag,"major: "+e.major),console.log(tag,"minor: "+e.minor),console.log(tag,"proximity: "+e.proximity),console.log(tag,"accuracy: "+e.accuracy),console.log(tag,"rssi: "+e.rssi),console.log(tag,"power: "+e.power),alert("proxCallback:minor:"+e.minor+", prox:"+e.proximity+", rssi:"+e.rssi+", accuracy:"+e.accuracy),!isInterestedRegion(e.rssi))



return console.log("Too far..."),void alert("Too far...rssi:"+e.rssi);


if(isSameStateBefore(e.uuid,e.major,e.minor))


return console.log(tag,"Same beacon"),void(isConfirmExit=!1);


setStateBeacon(e.uuid,e.major,e.minor),
alert(
"proxCallback:putApi->"+e.uuid+" Major: "+e.major+" Minor: "+e.minor+" prox:"+e.proximity),


putApi(e.major,e.minor);
var my_text=" "+e.major+", "+e.minor;
my_text=Ti.App.Properties.getString("f_beacon")+my_text,
Ti.App.Properties.setString("f_beacon",my_text),
isEnterRegion=!1;
}
};var


handle=null,
isConfirmExit=!1;
androidExited=function(e){



if(isConfirmExit=!0,console.log("exited region identifer: "+e.identifier),null!==Ti.App.Properties.getString("inetBeaconData_uuid")&&null==handle){
var countExit=0;
handle=setInterval(function(){























return console.log("isConfirmExit: "+isConfirmExit),60<countExit&&isConfirmExit?(alert("Exit uuid: "+Ti.App.Properties.getString("inetBeaconData_uuid")+"  Major: "+Ti.App.Properties.getString("inetBeaconData_major")+"  Minor: "+Ti.App.Properties.getString("inetBeaconData_minor")),resetStateBeacon(),clearInterval(handle),handle=null,console.log("it's really exit "+handle)):!isConfirmExit&&(clearInterval(handle),handle=null,console.log("it's not exit "+handle)),countExit++,void console.log("count: "+countExit);
},1e3);
}
},

androidBindingCallback=function(e){
tag="androidBindingCallback: ",
console.log(tag,e);
};var

inBeconRange=function(e){
var tag="beaconRanges: ";
console.log("beaconRanges: ","I am in the "+e.identifier+" region"),
console.log("beaconRanges: ","I see "+e.beacons.length+" beacons in this region:"),
console.log("beaconRanges: ","----------------"),
e.beacons.forEach(function(beacon,index){
console.log("beaconRanges: ","Beacon number: "+index),
console.log("beaconRanges: ","uuid: "+beacon.uuid),
console.log("beaconRanges: ","major: "+beacon.major),
console.log("beaconRanges: ","minor: "+beacon.minor),
console.log("beaconRanges: ","proximity: "+beacon.proximity),
console.log("beaconRanges: ","accuracy: "+beacon.accuracy),
console.log("beaconRanges: ","rssi: "+beacon.rssi),
console.log("beaconRanges: ","power: "+beacon.power),
console.log("----------------");
});
},

regionState=function(e){
var tag="regionState: ";
console.log("regionState: ","identifer: "+e.regionState);
};

BLE.addEventListener("enteredRegion",androidEntered),
BLE.addEventListener("exitedRegion",androidExited),
BLE.addEventListener("beaconProximity",androidBeaconProximityCallback),
BLE.addEventListener("onIBeaconServiceConnect",androidBindingCallback),
BLE.addEventListener("beaconRanges",inBeconRange),
BLE.addEventListener("determinedRegionState",regionState),

console.log("add evnt complete:",_Mathfloor(Date.now()));var







when_ready,
not_ready_count=0;

BLE.bindBeaconService(),

when_ready=setInterval(function(){return(
BLE.isReady()?(







Ti.API.info("Try",not_ready_count,"time, ","Okay! Module is ready!"),


BLE.checkAvailability()?void(





BLE.setBackgroundMode(!1),
BLE.setScanPeriods({
foregroundScanPeriod:5e3,
foregroundBetweenScanPeriod:200,
backgroundScanPeriod:5e3,
backgroundBetweenScanPeriod:200}),


BLE.startMonitoringForRegion({
identifier:beaconIdentifier,
uuid:beaconUUID}),


clearInterval(when_ready),
when_ready=null):void alert("It's not support in your device!")):(console.log("not_ready_count=",not_ready_count),console.log("BLE Not ready"),void not_ready_count++));
},1e3);

var monit;

monit=setInterval(function(){

if(!1)


return console.log("App in background. Stop scan."),void BLE.stopScan();

});


}else if(iosDidChangeAuthorization=(e)=>{switch(Ti.API.info("didChangeAuthorization"),e.state){case BLE.LOCATION_MANAGER_AUTHORIZATION_STATUS_AUTHORIZED_ALWAYS:alert("Manager authorization is always");break;case BLE.LOCATION_MANAGER_AUTHORIZATION_STATUS_AUTHORIZED_WHEN_IN_USE:alert("Manager authorization is when in use");break;case BLE.LOCATION_MANAGER_AUTHORIZATION_STATUS_DENIED:alert("Manager authorization is denied");break;case BLE.LOCATION_MANAGER_AUTHORIZATION_STATUS_NOT_DETERMINED:alert("Manager authorization is not determined");break;case BLE.LOCATION_MANAGER_AUTHORIZATION_STATUS_RESTRICTED:alert("Manager authorization is powered restricted");break;default:alert("Unknown");}},iosDidRangeBeacons=(e)=>{Ti.API.info("didRangeBeacons");var becaons=e.beacons;if(0===becaons.length)return console.log("No beacon in range"),void(null!==Ti.App.Properties.getString("inetBeaconData_uuid")&&(alert("Exit uuid: "+Ti.App.Properties.getString("inetBeaconData_uuid")+"  Major: "+Ti.App.Properties.getString("inetBeaconData_major")+"  Minor: "+Ti.App.Properties.getString("inetBeaconData_minor")),resetStateBeacon()));var proximity=becaons[0].proximity,accuracy=becaons[0].accuracy,major=becaons[0].major,minor=becaons[0].minor,haveCase=!0;(isInterestedRegion(proximity)||console.log("Too far..."),!isSameStateBefore(e.region.uuid,major,minor))&&(proximity===BLE.BEACON_PROXIMITY_UNKNOWN?alert("Beacon Location : UNKNOWN"):proximity===BLE.BEACON_PROXIMITY_IMMEDIATE?(setStateBeacon(e.region.uuid,major,minor),console.log(e.region.uuid+" Major: "+major+" Minor: "+minor),alert("IMMEDIATE uuid: "+e.region.uuid+"  Major: "+major+"  Minor: "+minor+"  Approx: "+accuracy+"m)")):proximity===BLE.BEACON_PROXIMITY_NEAR?(setStateBeacon(e.region.uuid,major,minor),console.log(e.region.uuid+" Major: "+major+" Minor: "+minor),alert("NEAR uuid: "+e.region.uuid+"  Major: "+major+"  Minor: "+minor+"  Approx: "+accuracy+"m)")):proximity===BLE.BEACON_PROXIMITY_FAR?(setStateBeacon(e.region.uuid,major,minor),console.log(e.region.uuid+" Major: "+major+" Minor: "+minor),alert("FAR uuid: "+e.region.uuid+"  Major: "+major+"  Minor: "+minor+"  Approx: "+accuracy+"m)")):(haveCase=!1,alert("Beacon Location : UNKNOWN")),haveCase&&putApi(major,minor))},null===manager){manager=BLE.createRegionManager(),manager.addEventListener("didChangeAuthorization",iosDidChangeAuthorization),manager.addEventListener("didRangeBeacons",iosDidRangeBeacons);var beaconRegion=BLE.createBeaconRegion({uuid:beaconUUID,identifier:beaconIdentifier});manager.startRegionMonitoring({beaconRegion:beaconRegion}),manager.startRangingBeaconsInRegion({beaconRegion:beaconRegion})}
}

function beaconStopScan(){
resetStateBeacon(),1?(







BLE.stopMonitoringAllRegions(),
BLE.removeEventListener("enteredRegion",androidEntered),
BLE.removeEventListener("exitedRegion",androidExited),
BLE.removeEventListener("beaconProximity",androidBeaconProximityCallback)):(manager.removeEventListener("didChangeAuthorization",iosDidChangeAuthorization),manager.removeEventListener("didRangeBeacons",iosDidRangeBeacons));

}

function putApi(major,minor){
var xhr=Ti.Network.createHTTPClient();
xhr.onload=function(e){
console.log(this.status),
console.log(this.responseText);
},
xhr.onerror=function(e){
console.log(this.status),
console.log(this.responseText);
},
xhr.timeout=1e4,

xhr.open("PUT","https://beacon-track.inet.co.th"),
xhr.setRequestHeader("X-API-KEY","RvBmll9opEnVZ3aBH6wygN7VXKr7DIYw"),
xhr.setRequestHeader("content-type","application/json");
var params={
uid:Ti.App.Properties.getString("inetBeaconData_cid"),
major:major,
minor:minor};

xhr.send(JSON.stringify(params));
}

function BLEScan(){
if(!1)

console.log("IOS");else


{

if(console.log("Android"),centralManager.isScanning())

return void console.log("Already scanning, please stop scan first!");


var gatt_handle;
gatt_handle=setInterval(function(e){return(
centralManager.didUpdateState==BLE.MANAGER_STATE_POWERED_ON?void(




centralManager.getState()!=BLE.MANAGER_STATE_POWERED_ON&&

console.log("BLE manager needs to be powered on before. Call initialize()."),


console.log("BLE.MANAGER_STATE_POWERED_ON"),

centralManager.startScan(),
console.log("Start BLE"),
clearInterval(gatt_handle),
gatt_handle=null):void console.log("didState=",centralManager.didUpdateState));
},1e3);
}
}













function stopBLE(){
centralManager.isScanning?(
console.log("Stop BLE"),
centralManager.stopScan()):


console.log("No scan session!");

}

function md5_hash(){var
tag="md5_hash",
my_cid=Ti.App.Properties.getString("inetBeaconData_cid");
console.log("md5_hash","cid:",my_cid);
var my_md5=Ti.Utils.md5HexDigest(`b1cf4b7ec203:${my_cid}:32780:1102`);
alert(my_md5);
}if(require("/alloy/controllers/BaseController").apply(this,Array.prototype.slice.call(arguments)),this.__controllerPath="inet_beacon/beacon",this.args=arguments[0]||{},arguments[0])var __parentSymbol=__processArg(arguments[0],"__parentSymbol"),$model=__processArg(arguments[0],"$model"),__itemTemplate=__processArg(arguments[0],"__itemTemplate");var $=this,exports={},__defers={};exports.destroy=function(){},_.extend($,$.__views);let beaconUUID="5991e161-bb46-432f-9bd8-b271f76f67d9",beaconIdentifier="Morprom";Ti.App.Properties.setString("f_beacon",""),console.log("begin:",_Mathfloor(Date.now()));var BLE=null,GATT=null,centralManager=null,isForeground=!0;1?(BLE=require("com.liferay.beacons"),GATT=require("ti.bluetooth"),centralManager=GATT.createCentralManager()):BLE=require("appcelerator.ble"),console.log("after lode lib:",_Mathfloor(Date.now()));var manager=null,iosDidRangeBeacons=null,iosDidChangeAuthorization=null,androidEntered=null,androidExited=null,androidBeaconProximityCallback=null,gattDidDiscover=function(e){Ti.API.info("didDiscoverPeripheral"),Ti.API.info(e.peripheral.uuids.uuid,"Address:",e.peripheral.address,e.peripheral.name)};centralManager.addEventListener("didDiscoverPeripheral",gattDidDiscover),

exports.beaconStartScan=beaconStartScan,
exports.beaconStopScan=beaconStopScan,
exports.putApi=putApi,
exports.BLEScan=BLEScan,
exports.stopBLE=stopBLE,
exports.md5_hash=md5_hash,









_.extend($,exports);
}

module.exports=Controller;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
