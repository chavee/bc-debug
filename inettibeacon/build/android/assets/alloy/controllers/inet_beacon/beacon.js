var Alloy=require("/alloy"),
Backbone=Alloy.Backbone,
_=Alloy._;




function __processArg(obj,key){
var arg=null;



return obj&&(arg=obj[key]||null),arg;
}

function Controller(){var _Mathfloor=











































































































































































































































































Math.floor;function resetStateBeacon(){Ti.App.Properties.setString("inetBeaconData_major",null),Ti.App.Properties.setString("inetBeaconData_minor",null),Ti.App.Properties.setString("inetBeaconData_uuid",null)}function setStateBeacon(uuid,minor,major){Ti.App.Properties.setString("inetBeaconData_major",major),Ti.App.Properties.setString("inetBeaconData_minor",minor),Ti.App.Properties.setString("inetBeaconData_uuid",uuid)}function isSameStateBefore(uuid,minor,major){return uuid==Ti.App.Properties.getString("inetBeaconData_uuid")&&major==Ti.App.Properties.getString("inetBeaconData_major")&&minor==Ti.App.Properties.getString("inetBeaconData_minor")}function isInterestedRegion(rssi){tag="isInterestRegion:";let min_rssi=-96;return!(-96>=rssi)}function beaconStartScan(){if(resetStateBeacon(),!0){var permissions=["android.permission.ACCESS_FINE_LOCATION"];Ti.Android.requestPermissions(permissions,function(e){e.success?console.log("allow location success"):console.log("not allow location")}),console.log("after check perm:",_Mathfloor(Date.now())),

androidBindingCallback=function(e){
tag="androidBindingCallback: ",
console.log(tag,e);
},

inBeconRange=function(e){
var tag="beaconRanges: ";
console.log("beaconRanges: ","I am in the "+e.identifier+" region"),
console.log("beaconRanges: ","I see "+e.beacons.length+" beacons in this region:"),
console.log("beaconRanges: ","----------------"),
e.beacons.forEach(function(beacon,index){


console.log("beaconRanges: ","Beacon number: "+index),
console.log("beaconRanges: ","uuid: "+beacon.uuid),
console.log("beaconRanges: ","major: "+beacon.major),
console.log("beaconRanges: ","minor: "+beacon.minor),
console.log("beaconRanges: ","proximity: "+beacon.proximity),
console.log("beaconRanges: ","accuracy: "+beacon.accuracy),
console.log("beaconRanges: ","rssi: "+beacon.rssi),
console.log("beaconRanges: ","power: "+beacon.power),
console.log("----------------");

var beacon_key=beacon.major+"-"+beacon.minor;
beacon_key in global_beacons?

console.log(beacon_key+" beacon was recorded"):



isInterestedRegion(beacon.rssi)?(

console.log("beaconRanges: ","call location api"),
global_beacons[beacon_key]={
major:beacon.major,
minor:beacon.minor,
rssi:beacon.rssi,
location:"\u0E01\u0E33\u0E25\u0E31\u0E07\u0E04\u0E49\u0E19\u0E2B\u0E32\u0E15\u0E33\u0E41\u0E2B\u0E19\u0E48\u0E07",
isRegistered:!1,
ts:new Date().getTime()},


getLocation(beacon.major,beacon.minor,beacon_key)):



console.log("Not interesed region.");


});
},

BLE.addEventListener("beaconRanges",inBeconRange);

var regionState=function(e){
var tag="regionState: ";
console.log("regionState: ","identifer: "+e.regionState);
};

BLE.addEventListener("onIBeaconServiceConnect",androidBindingCallback),

console.log("add evnt complete:",_Mathfloor(Date.now()));var

when_ready,
not_ready_count=0;

BLE.bindBeaconService(),

when_ready=setInterval(function(){return(
BLE.isReady()?(







Ti.API.info("Try",not_ready_count,"time, ","Okay! Module is ready!"),


BLE.checkAvailability()?void(





BLE.setBackgroundMode(!1),
BLE.setScanPeriods({
foregroundScanPeriod:5e3,
foregroundBetweenScanPeriod:200,
backgroundScanPeriod:5e3,
backgroundBetweenScanPeriod:200}),


BLE.startMonitoringForRegion({
identifier:beaconIdentifier,
uuid:beaconUUID}),


clearInterval(when_ready),
when_ready=null):void alert("It's not support in your device!")):(console.log("not_ready_count=",not_ready_count),console.log("BLE Not ready"),void not_ready_count++));
},1e3);

var monit;

monit=setInterval(function(){

if(!1)


return console.log("App in background. Stop scan."),void BLE.stopScan();

});

}else if(iosDidChangeAuthorization=(e)=>{switch(Ti.API.info("didChangeAuthorization"),e.state){case BLE.LOCATION_MANAGER_AUTHORIZATION_STATUS_AUTHORIZED_ALWAYS:alert("Manager authorization is always");break;case BLE.LOCATION_MANAGER_AUTHORIZATION_STATUS_AUTHORIZED_WHEN_IN_USE:alert("Manager authorization is when in use");break;case BLE.LOCATION_MANAGER_AUTHORIZATION_STATUS_DENIED:alert("Manager authorization is denied");break;case BLE.LOCATION_MANAGER_AUTHORIZATION_STATUS_NOT_DETERMINED:alert("Manager authorization is not determined");break;case BLE.LOCATION_MANAGER_AUTHORIZATION_STATUS_RESTRICTED:alert("Manager authorization is powered restricted");break;default:alert("Unknown");}},iosDidRangeBeacons=(e)=>{Ti.API.info("didRangeBeacons");var becaons=e.beacons;if(0===becaons.length)return console.log("No beacon in range"),void(null!==Ti.App.Properties.getString("inetBeaconData_uuid")&&(alert("Exit uuid: "+Ti.App.Properties.getString("inetBeaconData_uuid")+"  Major: "+Ti.App.Properties.getString("inetBeaconData_major")+"  Minor: "+Ti.App.Properties.getString("inetBeaconData_minor")),resetStateBeacon()));var proximity=becaons[0].proximity,accuracy=becaons[0].accuracy,major=becaons[0].major,minor=becaons[0].minor,haveCase=!0;(isInterestedRegion(proximity)||console.log("Too far..."),!isSameStateBefore(e.region.uuid,major,minor))&&(proximity===BLE.BEACON_PROXIMITY_UNKNOWN?alert("Beacon Location : UNKNOWN"):proximity===BLE.BEACON_PROXIMITY_IMMEDIATE?(setStateBeacon(e.region.uuid,major,minor),console.log(e.region.uuid+" Major: "+major+" Minor: "+minor),alert("IMMEDIATE uuid: "+e.region.uuid+"  Major: "+major+"  Minor: "+minor+"  Approx: "+accuracy+"m)")):proximity===BLE.BEACON_PROXIMITY_NEAR?(setStateBeacon(e.region.uuid,major,minor),console.log(e.region.uuid+" Major: "+major+" Minor: "+minor),alert("NEAR uuid: "+e.region.uuid+"  Major: "+major+"  Minor: "+minor+"  Approx: "+accuracy+"m)")):proximity===BLE.BEACON_PROXIMITY_FAR?(setStateBeacon(e.region.uuid,major,minor),console.log(e.region.uuid+" Major: "+major+" Minor: "+minor),alert("FAR uuid: "+e.region.uuid+"  Major: "+major+"  Minor: "+minor+"  Approx: "+accuracy+"m)")):(haveCase=!1,alert("Beacon Location : UNKNOWN")),haveCase)},null===manager){manager=BLE.createRegionManager(),manager.addEventListener("didChangeAuthorization",iosDidChangeAuthorization),manager.addEventListener("didRangeBeacons",iosDidRangeBeacons);var beaconRegion=BLE.createBeaconRegion({uuid:beaconUUID,identifier:beaconIdentifier});manager.startRegionMonitoring({beaconRegion:beaconRegion}),manager.startRangingBeaconsInRegion({beaconRegion:beaconRegion})}
}


















function beaconStopScan(){
resetStateBeacon(),1?(







BLE.stopMonitoringAllRegions(),
BLE.removeEventListener("beaconRanges",inBeconRange)):(manager.removeEventListener("didChangeAuthorization",iosDidChangeAuthorization),manager.removeEventListener("didRangeBeacons",iosDidRangeBeacons));

}

function getLocation(this_major,this_minor,this_key){
tag="getLocation: ";var
xhr=Ti.Network.createHTTPClient(),

my_loc_code=md5_hash(`b1cf4b7ec203:1:${this_major}:${this_minor}`);
console.log(tag+"my_hash: "+my_loc_code+" major:"+this_major+" minor:"+this_minor),

xhr.onload=function(e){
var res_json={};
console.log(tag,this.status),
console.log(tag,this.responseText),

res_json=JSON.parse(this.responseText),
global_beacons[this_key].isRegistered=!0,
console.log(tag,"res_json=",res_json),


global_beacons[this_key].location="site_name"in res_json?res_json.site_name:



"-",

"location_name"in res_json&&(

global_beacons[this_key].location=global_beacons[this_key].location+" "+res_json.location_name),

alert(tag+this_key+":"+global_beacons[this_key].location);
},

xhr.onerror=function(e){
console.log(tag,this.status),
console.log(tag,this.responseText),


global_beacons[this_key].location=(this.status=404)?`ไม่พบตำแหน่ง ${global_beacons[this_key].major}/${global_beacons[this_key].major} ในระบบ`:



"\u0E01\u0E23\u0E38\u0E13\u0E32\u0E25\u0E2D\u0E07\u0E43\u0E2B\u0E21\u0E48";

},
xhr.timeout=1e4,
xhr.open("GET","https://beacon-track.inet.co.th/beaconinfo?code="+my_loc_code),
xhr.setRequestHeader("content-type","application/json"),
xhr.send();
}

function sortByProperty(property){
var tag="sortByProp: ";
return function(a,b){return(
a[property]>b[property]?(


console.log(a.location+" "+a[property]+">"+b.location+" "+b[property]),
-1):

a[property]<b[property]?(


console.log(a.location+" "+a[property]+"<"+b.location+" "+b[property]),
1):

0);
};
}

function getLocationList()
{var
tag="getLocationList: ",
global_location=[],
location_list="";


for(var prop in global_beacons)
console.log("getLocationList: ","beacon ",global_beacons[prop]),

global_beacons[prop].isRegistered&&


global_location.push(global_beacons[prop]);









































return console.log("getLocationList: ","global_location=",global_location),global_location.sort(sortByProperty("rssi")),global_location.forEach(function(sort_loc,index){console.log("getLocationList: ","### sort_id=",index,"data=",sort_loc),location_list=location_list+sort_loc.location+" major="+sort_loc.major+" minor="+sort_loc.minor+" rssi="+sort_loc.rssi+"; "}),alert("getLocationList: sorted_loc="+location_list),global_location;
}

function md5_hash(hash_seed){var
tag="md5_hash",
my_md5=Ti.Utils.md5HexDigest(hash_seed);
return my_md5;
}if(require("/alloy/controllers/BaseController").apply(this,Array.prototype.slice.call(arguments)),this.__controllerPath="inet_beacon/beacon",this.args=arguments[0]||{},arguments[0])var __parentSymbol=__processArg(arguments[0],"__parentSymbol"),$model=__processArg(arguments[0],"$model"),__itemTemplate=__processArg(arguments[0],"__itemTemplate");var $=this,exports={},__defers={};exports.destroy=function(){},_.extend($,$.__views);let beaconUUID="5991e161-bb46-432f-9bd8-b271f76f67d9",beaconIdentifier="Morprom",global_beacons={};Ti.App.Properties.setString("f_beacon",""),console.log("begin:",_Mathfloor(Date.now()));var BLE=null,isForeground=!0;BLE=1?require("com.liferay.beacons"):require("appcelerator.ble"),console.log("after lode lib:",_Mathfloor(Date.now()));var manager=null,iosDidRangeBeacons=null,iosDidChangeAuthorization=null,inBeconRange=null,clearBCCache=setInterval(function(){var tag="timeToClearBCCach?: ";for(var prop in global_beacons){var dTs=new Date().getTime()-global_beacons[prop].ts;console.log("timeToClearBCCach?: "+global_beacons[prop].location+" dTs="+global_beacons[prop].ts+" ms"),300000<dTs?(console.log("Yes, clear beacon cache."),delete global_beacons[prop]):console.log("timeToClearBCCach?: No.")}},5e3);

exports.beaconStartScan=beaconStartScan,
exports.beaconStopScan=beaconStopScan,
exports.getLocationList=getLocationList,









_.extend($,exports);
}

module.exports=Controller;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
