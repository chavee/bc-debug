var Alloy=require("/alloy"),
Backbone=Alloy.Backbone,
_=Alloy._;




function __processArg(obj,key){
var arg=null;



return obj&&(arg=obj[key]||null),arg;
}

function Controller(){
































function resetStateBeacon(){
Ti.App.Properties.setString("inetBeaconData_major",null),
Ti.App.Properties.setString("inetBeaconData_minor",null),
Ti.App.Properties.setString("inetBeaconData_uuid",null);
}
function setStateBeacon(uuid,minor,major){
Ti.App.Properties.setString("inetBeaconData_major",major),
Ti.App.Properties.setString("inetBeaconData_minor",minor),
Ti.App.Properties.setString("inetBeaconData_uuid",uuid);
}
function isSameStateBefore(uuid,minor,major){return(

uuid==Ti.App.Properties.getString("inetBeaconData_uuid")&&
major==Ti.App.Properties.getString("inetBeaconData_major")&&
minor==Ti.App.Properties.getString("inetBeaconData_minor"));




}
















function beaconStartScan(){

if(resetStateBeacon(),!0)

















































































































































{


var permissions=["android.permission.ACCESS_FINE_LOCATION"];
Ti.Android.requestPermissions(permissions,function(e){
e.success?
console.log("allow location success"):

console.log("not allow location");

});


var isEnterRegion=!1;
androidEntered=function(e){
let tag="androidEntered:";
console.log("androidEntered:","entered region identifer: "+e.identifier),
console.log("androidEntered:",e),
isEnterRegion=!0,
alert("androidEntered:Enter");


},


androidBeaconProximityCallback=function(e){
let tag="proxCallback:";
if(isEnterRegion){

if(isSameStateBefore(e.uuid,e.major,e.minor))


return console.log(tag,"Same beacon"),void(isConfirmExit=!1);


setStateBeacon(e.uuid,e.major,e.minor),
alert(
"proxCallback: "+e.uuid+" Major: "+e.major+" Minor: "+e.minor),


putApi(e.major,e.minor),
isEnterRegion=!1;
}
console.log("proxCallback:","identifer: "+e.identifier),
console.log("proxCallback:","uuid: "+e.uuid),
console.log("proxCallback:","major: "+e.major),
console.log("proxCallback:","minor: "+e.minor),
console.log("proxCallback:","proximity: "+e.proximity),
console.log("proxCallback:","accuracy: "+e.accuracy),
console.log("proxCallback:","rssi: "+e.rssi),
console.log("proxCallback:","power: "+e.power);
};var


handle=null,
isConfirmExit=!1;
androidExited=function(e){



if(isConfirmExit=!0,console.log("exited region identifer: "+e.identifier),null!==Ti.App.Properties.getString("inetBeaconData_uuid")&&null==handle){
var countExit=0;
handle=setInterval(function(){























return console.log("isConfirmExit: "+isConfirmExit),60<countExit&&isConfirmExit?(alert("Exit uuid: "+Ti.App.Properties.getString("inetBeaconData_uuid")+"  Major: "+Ti.App.Properties.getString("inetBeaconData_major")+"  Minor: "+Ti.App.Properties.getString("inetBeaconData_minor")),resetStateBeacon(),clearInterval(handle),handle=null,console.log("it's really exit "+handle)):!isConfirmExit&&(clearInterval(handle),handle=null,console.log("it's not exit "+handle)),countExit++,void console.log("count: "+countExit);
},1e3);
}
},

BLE.addEventListener("enteredRegion",androidEntered),
BLE.addEventListener("exitedRegion",androidExited),
BLE.addEventListener("beaconProximity",androidBeaconProximityCallback),






BLE.startMonitoringForRegion({
identifier:beaconIdentifier,
uuid:beaconUUID}),

BLE.setBackgroundMode(!1),

BLE.setScanPeriods({
foregroundScanPeriod:5e3,
foregroundBetweenScanPeriod:200,
backgroundScanPeriod:5e3,
backgroundBetweenScanPeriod:200});


}else if(iosDidChangeAuthorization=e=>{switch(Ti.API.info("didChangeAuthorization"),e.state){case BLE.LOCATION_MANAGER_AUTHORIZATION_STATUS_AUTHORIZED_ALWAYS:alert("Manager authorization is always");break;case BLE.LOCATION_MANAGER_AUTHORIZATION_STATUS_AUTHORIZED_WHEN_IN_USE:alert("Manager authorization is when in use");break;case BLE.LOCATION_MANAGER_AUTHORIZATION_STATUS_DENIED:alert("Manager authorization is denied");break;case BLE.LOCATION_MANAGER_AUTHORIZATION_STATUS_NOT_DETERMINED:alert("Manager authorization is not determined");break;case BLE.LOCATION_MANAGER_AUTHORIZATION_STATUS_RESTRICTED:alert("Manager authorization is powered restricted");break;default:alert("Unknown");}},iosDidRangeBeacons=e=>{Ti.API.info("didRangeBeacons");var becaons=e.beacons;if(0===becaons.length)return console.log("No beacon in range"),void(null!==Ti.App.Properties.getString("inetBeaconData_uuid")&&(alert("Exit uuid: "+Ti.App.Properties.getString("inetBeaconData_uuid")+"  Major: "+Ti.App.Properties.getString("inetBeaconData_major")+"  Minor: "+Ti.App.Properties.getString("inetBeaconData_minor")),resetStateBeacon()));var proximity=becaons[0].proximity,accuracy=becaons[0].accuracy,major=becaons[0].major,minor=becaons[0].minor,haveCase=!0;isSameStateBefore(e.region.uuid,major,minor)||(proximity===BLE.BEACON_PROXIMITY_UNKNOWN?alert("Beacon Location : UNKNOWN"):proximity===BLE.BEACON_PROXIMITY_IMMEDIATE?(setStateBeacon(e.region.uuid,major,minor),console.log(e.region.uuid+" Major: "+major+" Minor: "+minor),alert("IMMEDIATE uuid: "+e.region.uuid+"  Major: "+major+"  Minor: "+minor+"  Approx: "+accuracy+"m)")):proximity===BLE.BEACON_PROXIMITY_NEAR?(setStateBeacon(e.region.uuid,major,minor),console.log(e.region.uuid+" Major: "+major+" Minor: "+minor),alert("NEAR uuid: "+e.region.uuid+"  Major: "+major+"  Minor: "+minor+"  Approx: "+accuracy+"m)")):proximity===BLE.BEACON_PROXIMITY_FAR?(setStateBeacon(e.region.uuid,major,minor),console.log(e.region.uuid+" Major: "+major+" Minor: "+minor),alert("FAR uuid: "+e.region.uuid+"  Major: "+major+"  Minor: "+minor+"  Approx: "+accuracy+"m)")):(haveCase=!1,alert("Beacon Location : UNKNOWN")),haveCase&&putApi(major,minor))},null===manager){manager=BLE.createRegionManager(),manager.addEventListener("didChangeAuthorization",iosDidChangeAuthorization),manager.addEventListener("didRangeBeacons",iosDidRangeBeacons);var beaconRegion=BLE.createBeaconRegion({uuid:beaconUUID,identifier:beaconIdentifier});manager.startRegionMonitoring({beaconRegion:beaconRegion}),manager.startRangingBeaconsInRegion({beaconRegion:beaconRegion})}
}

function beaconStopScan(){
resetStateBeacon(),1?(







BLE.stopMonitoringAllRegions(),
BLE.removeEventListener("enteredRegion",androidEntered),
BLE.removeEventListener("exitedRegion",androidExited),
BLE.removeEventListener("beaconProximity",androidBeaconProximityCallback)):(manager.removeEventListener("didChangeAuthorization",iosDidChangeAuthorization),manager.removeEventListener("didRangeBeacons",iosDidRangeBeacons));

}

function putApi(major,minor){
var xhr=Ti.Network.createHTTPClient();
xhr.onload=function(e){
console.log(this.status),
console.log(this.responseText);
},
xhr.onerror=function(e){
console.log(this.status),
console.log(this.responseText);
},
xhr.timeout=1e4,

xhr.open("PUT","https://beacon-track.inet.co.th"),
xhr.setRequestHeader("X-API-KEY","RvBmll9opEnVZ3aBH6wygN7VXKr7DIYw"),
xhr.setRequestHeader("content-type","application/json");
var params={
uid:Ti.App.Properties.getString("inetBeaconData_cid"),
major:major,
minor:minor};

xhr.send(JSON.stringify(params));
}if(require("/alloy/controllers/BaseController").apply(this,Array.prototype.slice.call(arguments)),this.__controllerPath="inet_beacon/beacon",this.args=arguments[0]||{},arguments[0])var __parentSymbol=__processArg(arguments[0],"__parentSymbol"),$model=__processArg(arguments[0],"$model"),__itemTemplate=__processArg(arguments[0],"__itemTemplate");var $=this,exports={},__defers={};exports.destroy=function(){},_.extend($,$.__views);let beaconUUID="5991e161-bb46-432f-9bd8-b271f76f67d9",beaconIdentifier="MyHome";var BLE=null;BLE=1?require("com.liferay.beacons"):require("appcelerator.ble");var manager=null,iosDidRangeBeacons=null,iosDidChangeAuthorization=null,androidEntered=null,androidExited=null,androidBeaconProximityCallback=null;

exports.beaconStartScan=beaconStartScan,
exports.beaconStopScan=beaconStopScan,
exports.putApi=putApi,









_.extend($,exports);
}

module.exports=Controller;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
