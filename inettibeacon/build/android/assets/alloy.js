
























var _=require("/alloy/underscore")._,
Backbone=require("/alloy/backbone"),
CONST=require("/alloy/constants");

exports.version="1.17.1",
exports._=_,
exports.Backbone=Backbone;var

DEFAULT_WIDGET="widget",
MW320_CHECK=!1,
IDENTITY_TRANSFORM=!0?Ti.UI.createMatrix2D?Ti.UI.createMatrix2D():Ti.UI.create2DMatrix():void 0,
RESET={
bottom:null,
left:null,
right:null,
top:null,
height:null,
width:null,
shadowColor:null,
shadowOffset:null,
backgroundImage:null,
backgroundRepeat:null,
center:null,
layout:null,
backgroundSelectedColor:null,
backgroundSelectedImage:null,


opacity:1,
touchEnabled:!0,
enabled:!0,
horizontalWrap:!0,
zIndex:0,





backgroundColor:!0?"transparent":null,



font:null,



visible:!0,



color:!0?"#000":null,








transform:!0?IDENTITY_TRANSFORM:null,



backgroundGradient:!0?null:{},



borderColor:!0?null:"transparent",


borderRadius:!1?0:null,


borderWidth:!1?0:null};



RESET=1?




_.extend(RESET,{
backgroundDisabledColor:null,
backgroundDisabledImage:null,
backgroundFocusedColor:null,
backgroundFocusedImage:null,
focusable:!1,
keepScreenOn:!1}):_.extend(RESET,{backgroundLeftCap:0,backgroundTopCap:0});



function ucfirst(text){return(
text?
text[0].toUpperCase()+text.substr(1):text);
}

function addNamespace(apiName){
return(CONST.IMPLICIT_NAMESPACES[apiName]||CONST.NAMESPACE_DEFAULT)+
"."+apiName;
}

exports.M=function(name,modelDesc,migrations){var




mod,config=(modelDesc||{}).config||{},adapter=config.adapter||{},extendObj={},extendClass={};

adapter.type?(
mod=require("/alloy/sync/"+adapter.type),
extendObj.sync=function(method,model,opts){
return mod.sync(method,model,opts);
}):

extendObj.sync=function(method,model,opts){
Ti.API.warn("Execution of "+method+"#sync() function on a model that does not support persistence"),
Ti.API.warn("model: "+JSON.stringify(model.toJSON()));
},

extendObj.defaults=config.defaults,


migrations&&(extendClass.migrations=migrations),


mod&&_.isFunction(mod.beforeModelCreate)&&(
config=mod.beforeModelCreate(config,name)||config);



var Model=Backbone.Model.extend(extendObj,extendClass);












return Model.prototype.config=config,_.isFunction(modelDesc.extendModel)&&(Model=modelDesc.extendModel(Model)||Model),mod&&_.isFunction(mod.afterModelCreate)&&mod.afterModelCreate(Model,name),Model;
},

exports.C=function(name,modelDesc,model){var


mod,extendObj={model:model},config=(model?model.prototype.config:{})||{};

config.adapter&&config.adapter.type?(
mod=require("/alloy/sync/"+config.adapter.type),
extendObj.sync=function(method,model,opts){
return mod.sync(method,model,opts);
}):

extendObj.sync=function(method,model,opts){
Ti.API.warn("Execution of "+method+"#sync() function on a collection that does not support persistence"),
Ti.API.warn("model: "+JSON.stringify(model.toJSON()));
};


var Collection=Backbone.Collection.extend(extendObj);












return Collection.prototype.config=config,_.isFunction(modelDesc.extendCollection)&&(Collection=modelDesc.extendCollection(Collection)||Collection),mod&&_.isFunction(mod.afterCollectionCreate)&&mod.afterCollectionCreate(Collection),Collection;
},

exports.UI={},
exports.UI.create=function(controller,apiName,opts){
opts=opts||{};var


baseName,ns,
parts=apiName.split(".");
if(1===parts.length)
baseName=apiName,
ns=opts.ns||CONST.IMPLICIT_NAMESPACES[baseName]||CONST.NAMESPACE_DEFAULT;else
if(1<parts.length)
baseName=parts[parts.length-1],
ns=parts.slice(0,parts.length-1).join(".");else

throw"Alloy.UI.create() failed: No API name was given in the second parameter";

opts.apiName=ns+"."+baseName,
baseName=baseName[0].toUpperCase()+baseName.substr(1);


var style=exports.createStyle(controller,opts);


return eval(ns)["create"+baseName](style);
},

exports.createStyle=function(controller,opts,defaults){
var classes,apiName;



if(!opts)return{};



classes=_.isArray(opts.classes)?opts.classes.slice(0):
_.isString(opts.classes)?
opts.classes.split(/\s+/):

[],



apiName=opts.apiName,
apiName&&-1===apiName.indexOf(".")&&(
apiName=addNamespace(apiName));





var styleArray;

styleArray=controller&&_.isObject(controller)?require("/alloy/widgets/"+controller.widgetId+
"/styles/"+controller.name):

require("/alloy/styles/"+controller);var




i,len,styleFinal={};
for(i=0,len=styleArray.length;i<len;i++){var
style=styleArray[i],


styleApi=style.key;






if(style.isApi&&-1===styleApi.indexOf(".")&&(styleApi=(CONST.IMPLICIT_NAMESPACES[styleApi]||CONST.NAMESPACE_DEFAULT)+"."+styleApi),style.isId&&opts.id&&style.key===opts.id||
style.isClass&&_.contains(classes,style.key));else

if(!style.isApi)






continue;else if(-1===style.key.indexOf(".")&&(style.key=addNamespace(style.key)),style.key!==apiName)continue;



style.queries&&style.queries.formFactor&&
!exports[style.queries.formFactor]||




style.queries&&style.queries.if&&(
"false"===style.queries.if.trim().toLowerCase()||
-1!==style.queries.if.indexOf("Alloy.Globals")&&
!1===exports.Globals[style.queries.if.split(".")[2]])||




exports.deepExtend(!0,styleFinal,style.style);
}




var extraStyle=_.omit(opts,[
CONST.CLASS_PROPERTY,
CONST.APINAME_PROPERTY]);







return exports.deepExtend(!0,styleFinal,extraStyle),styleFinal[CONST.CLASS_PROPERTY]=classes,styleFinal[CONST.APINAME_PROPERTY]=apiName,MW320_CHECK&&delete styleFinal[CONST.APINAME_PROPERTY],defaults?_.defaults(styleFinal,defaults):styleFinal;
};

function processStyle(controller,proxy,classes,opts,defaults){
opts=opts||{},
opts.classes=classes,
proxy.apiName&&(opts.apiName=proxy.apiName),
proxy.id&&(opts.id=proxy.id),
proxy.applyProperties(exports.createStyle(controller,opts,defaults)),
proxy.classes=classes;
}

exports.addClass=function(controller,proxy,classes,opts){


if(!classes)




return void(opts&&(MW320_CHECK&&delete opts.apiName,proxy.applyProperties(opts)));var


pClasses=proxy[CONST.CLASS_PROPERTY]||[],
beforeLen=pClasses.length;
classes=_.isString(classes)?classes.split(/\s+/):classes;
var newClasses=_.union(pClasses,classes||[]);return(


beforeLen===newClasses.length?void(
opts&&(
MW320_CHECK&&delete opts.apiName,
proxy.applyProperties(opts))):void



processStyle(controller,proxy,newClasses,opts));


},

exports.removeClass=function(controller,proxy,classes,opts){
classes=classes||[];var
pClasses=proxy[CONST.CLASS_PROPERTY]||[],
beforeLen=pClasses.length;


if(!beforeLen||!classes.length)




return void(opts&&(MW320_CHECK&&delete opts.apiName,proxy.applyProperties(opts)));


classes=_.isString(classes)?classes.split(/\s+/):classes;
var newClasses=_.difference(pClasses,classes);return(


beforeLen===newClasses.length?void(
opts&&(
MW320_CHECK&&delete opts.apiName,
proxy.applyProperties(opts))):void



processStyle(controller,proxy,newClasses,opts,RESET));


},

exports.resetClass=function(controller,proxy,classes,opts){
classes=classes||[],
classes=_.isString(classes)?classes.split(/\s+/):classes,
processStyle(controller,proxy,classes,opts,RESET);
},










exports.createWidget=function(id,name,args){





return"undefined"!=typeof name&&null!==name&&_.isObject(name)&&!_.isString(name)&&(args=name,name=DEFAULT_WIDGET),new(require("/alloy/widgets/"+id+"/controllers/"+(name||DEFAULT_WIDGET)))(args);
},









exports.createController=function(name,args){
return new(require("/alloy/controllers/"+name))(args);
},












exports.createModel=function(name,args){
return new(require("/alloy/models/"+ucfirst(name)).Model)(args);
},













exports.createCollection=function(name,args){
return new(require("/alloy/models/"+ucfirst(name)).Collection)(args);
};

function isTabletFallback(){
return(


700<=Math.min(Ti.Platform.displayCaps.platformHeight,Ti.Platform.displayCaps.platformWidth));
}






exports.isTablet=function(){var _Mathmax=



















Math.max,_Mathmin=Math.min;if(!1)return!1;if(!0){var psc=Ti.Platform.Android.physicalSizeCategory;return psc===Ti.Platform.Android.PHYSICAL_SIZE_CATEGORY_LARGE||psc===Ti.Platform.Android.PHYSICAL_SIZE_CATEGORY_XLARGE}return 1?1?




isTabletFallback():1024<=_Mathmax(Ti.Platform.displayCaps.platformHeight,Ti.Platform.displayCaps.platformWidth):400<=_Mathmin(Ti.Platform.displayCaps.platformHeight,Ti.Platform.displayCaps.platformWidth);

}(),






exports.isHandheld=!exports.isTablet,















exports.Globals={},















exports.Models={},






exports.Models.instance=function(name){
return exports.Models[name]||(exports.Models[name]=exports.createModel(name));
},















exports.Collections={},






exports.Collections.instance=function(name){
return exports.Collections[name]||(exports.Collections[name]=exports.createCollection(name));
},






























exports.CFG=require("/alloy/CFG"),


exports.Android={},
exports.Android.menuItemCreateArgs=["itemId","groupId","title","order","actionView","checkable","checked","enabled","icon","showAsAction","titleCondensed","visible"],















exports.deepExtend=function(){var




options,name,src,copy,copy_is_array,clone,target=arguments[0]||{},i=1,length=arguments.length,deep=!1;














for("boolean"==typeof target&&(deep=target,target=arguments[1]||{},i=2),"object"==typeof target||_.isFunction(target)||(target={});i<length;i++)


if(options=arguments[i],null!=options)




for(name in"string"==typeof options&&(options=options.split("")),options)(
src=target[name],
copy=options[name],


target!==copy)&&(



deep&&copy&&!_.isFunction(copy)&&_.isObject(copy)&&((copy_is_array=_.isArray(copy))||!_.has(copy,"apiName"))?(

copy_is_array?(
copy_is_array=!1,
clone=src&&_.isArray(src)?src:[]):
_.isDate(copy)?
clone=new Date(copy.valueOf()):

clone=src&&_.isObject(src)?src:{},



target[name]=exports.deepExtend(deep,clone,copy)):

target[name]=copy);






return target;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFsbG95LmpzIl0sIm5hbWVzIjpbIl8iLCJyZXF1aXJlIiwiQmFja2JvbmUiLCJDT05TVCIsImV4cG9ydHMiLCJ2ZXJzaW9uIiwiREVGQVVMVF9XSURHRVQiLCJNVzMyMF9DSEVDSyIsIklERU5USVRZX1RSQU5TRk9STSIsIlRpIiwiVUkiLCJjcmVhdGVNYXRyaXgyRCIsImNyZWF0ZTJETWF0cml4IiwiUkVTRVQiLCJib3R0b20iLCJsZWZ0IiwicmlnaHQiLCJ0b3AiLCJoZWlnaHQiLCJ3aWR0aCIsInNoYWRvd0NvbG9yIiwic2hhZG93T2Zmc2V0IiwiYmFja2dyb3VuZEltYWdlIiwiYmFja2dyb3VuZFJlcGVhdCIsImNlbnRlciIsImxheW91dCIsImJhY2tncm91bmRTZWxlY3RlZENvbG9yIiwiYmFja2dyb3VuZFNlbGVjdGVkSW1hZ2UiLCJvcGFjaXR5IiwidG91Y2hFbmFibGVkIiwiZW5hYmxlZCIsImhvcml6b250YWxXcmFwIiwiekluZGV4IiwiYmFja2dyb3VuZENvbG9yIiwiZm9udCIsInZpc2libGUiLCJjb2xvciIsInRyYW5zZm9ybSIsImJhY2tncm91bmRHcmFkaWVudCIsImJvcmRlckNvbG9yIiwiYm9yZGVyUmFkaXVzIiwiYm9yZGVyV2lkdGgiLCJleHRlbmQiLCJiYWNrZ3JvdW5kRGlzYWJsZWRDb2xvciIsImJhY2tncm91bmREaXNhYmxlZEltYWdlIiwiYmFja2dyb3VuZEZvY3VzZWRDb2xvciIsImJhY2tncm91bmRGb2N1c2VkSW1hZ2UiLCJmb2N1c2FibGUiLCJrZWVwU2NyZWVuT24iLCJiYWNrZ3JvdW5kTGVmdENhcCIsImJhY2tncm91bmRUb3BDYXAiLCJ1Y2ZpcnN0IiwidGV4dCIsInRvVXBwZXJDYXNlIiwic3Vic3RyIiwiYWRkTmFtZXNwYWNlIiwiYXBpTmFtZSIsIklNUExJQ0lUX05BTUVTUEFDRVMiLCJOQU1FU1BBQ0VfREVGQVVMVCIsIk0iLCJuYW1lIiwibW9kZWxEZXNjIiwibWlncmF0aW9ucyIsIm1vZCIsImNvbmZpZyIsImFkYXB0ZXIiLCJleHRlbmRPYmoiLCJleHRlbmRDbGFzcyIsInR5cGUiLCJzeW5jIiwibWV0aG9kIiwibW9kZWwiLCJvcHRzIiwiQVBJIiwid2FybiIsIkpTT04iLCJzdHJpbmdpZnkiLCJ0b0pTT04iLCJkZWZhdWx0cyIsImlzRnVuY3Rpb24iLCJiZWZvcmVNb2RlbENyZWF0ZSIsIk1vZGVsIiwicHJvdG90eXBlIiwiZXh0ZW5kTW9kZWwiLCJhZnRlck1vZGVsQ3JlYXRlIiwiQyIsIkNvbGxlY3Rpb24iLCJleHRlbmRDb2xsZWN0aW9uIiwiYWZ0ZXJDb2xsZWN0aW9uQ3JlYXRlIiwiY3JlYXRlIiwiY29udHJvbGxlciIsImJhc2VOYW1lIiwibnMiLCJwYXJ0cyIsInNwbGl0IiwibGVuZ3RoIiwic2xpY2UiLCJqb2luIiwic3R5bGUiLCJjcmVhdGVTdHlsZSIsImV2YWwiLCJjbGFzc2VzIiwiaXNBcnJheSIsImlzU3RyaW5nIiwiaW5kZXhPZiIsInN0eWxlQXJyYXkiLCJpc09iamVjdCIsIndpZGdldElkIiwiaSIsImxlbiIsInN0eWxlRmluYWwiLCJzdHlsZUFwaSIsImtleSIsImlzQXBpIiwiaXNJZCIsImlkIiwiaXNDbGFzcyIsImNvbnRhaW5zIiwicXVlcmllcyIsImZvcm1GYWN0b3IiLCJpZiIsInRyaW0iLCJ0b0xvd2VyQ2FzZSIsIkdsb2JhbHMiLCJkZWVwRXh0ZW5kIiwiZXh0cmFTdHlsZSIsIm9taXQiLCJDTEFTU19QUk9QRVJUWSIsIkFQSU5BTUVfUFJPUEVSVFkiLCJwcm9jZXNzU3R5bGUiLCJwcm94eSIsImFwcGx5UHJvcGVydGllcyIsImFkZENsYXNzIiwicENsYXNzZXMiLCJiZWZvcmVMZW4iLCJuZXdDbGFzc2VzIiwidW5pb24iLCJyZW1vdmVDbGFzcyIsImRpZmZlcmVuY2UiLCJyZXNldENsYXNzIiwiY3JlYXRlV2lkZ2V0IiwiYXJncyIsImNyZWF0ZUNvbnRyb2xsZXIiLCJjcmVhdGVNb2RlbCIsImNyZWF0ZUNvbGxlY3Rpb24iLCJpc1RhYmxldEZhbGxiYWNrIiwiTWF0aCIsIm1pbiIsIlBsYXRmb3JtIiwiZGlzcGxheUNhcHMiLCJwbGF0Zm9ybUhlaWdodCIsInBsYXRmb3JtV2lkdGgiLCJpc1RhYmxldCIsIm1heCIsInBzYyIsIkFuZHJvaWQiLCJwaHlzaWNhbFNpemVDYXRlZ29yeSIsIlBIWVNJQ0FMX1NJWkVfQ0FURUdPUllfTEFSR0UiLCJQSFlTSUNBTF9TSVpFX0NBVEVHT1JZX1hMQVJHRSIsImlzSGFuZGhlbGQiLCJNb2RlbHMiLCJpbnN0YW5jZSIsIkNvbGxlY3Rpb25zIiwiQ0ZHIiwibWVudUl0ZW1DcmVhdGVBcmdzIiwib3B0aW9ucyIsInNyYyIsImNvcHkiLCJjb3B5X2lzX2FycmF5IiwiY2xvbmUiLCJ0YXJnZXQiLCJhcmd1bWVudHMiLCJkZWVwIiwiaGFzIiwiaXNEYXRlIiwiRGF0ZSIsInZhbHVlT2YiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF5QkEsR0FBSUEsQ0FBQUEsQ0FBQyxDQUFHQyxPQUFPLENBQUMsbUJBQUQsQ0FBUCxDQUE2QkQsQ0FBckM7QUFDQUUsUUFBUSxDQUFHRCxPQUFPLENBQUMsaUJBQUQsQ0FEbEI7QUFFQUUsS0FBSyxDQUFHRixPQUFPLENBQUMsa0JBQUQsQ0FGZjs7QUFJQUcsT0FBTyxDQUFDQyxPQUFSLENBQWtCLFE7QUFDbEJELE9BQU8sQ0FBQ0osQ0FBUixDQUFZQSxDO0FBQ1pJLE9BQU8sQ0FBQ0YsUUFBUixDQUFtQkEsUTs7QUFFZkksY0FBYyxDQUFHLFE7QUFDakJDLFdBQVcsRztBQUNYQyxrQkFBa0IsQ0FBRyxHQUFPQyxFQUFFLENBQUNDLEVBQUgsQ0FBTUMsY0FBTixDQUF1QkYsRUFBRSxDQUFDQyxFQUFILENBQU1DLGNBQU4sRUFBdkIsQ0FBZ0RGLEVBQUUsQ0FBQ0MsRUFBSCxDQUFNRSxjQUFOLEVBQXZELE87QUFDckJDLEtBQUssQ0FBRztBQUNWQyxNQUFNLENBQUUsSUFERTtBQUVWQyxJQUFJLENBQUUsSUFGSTtBQUdWQyxLQUFLLENBQUUsSUFIRztBQUlWQyxHQUFHLENBQUUsSUFK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QU4sQ0FBWSxTQUFaLENBQWxHLENBVE47O0FBV1FDLGFBWFI7QUFZTUEsYUFBYSxHQVpuQjtBQWFNQyxLQUFLLENBQUdILEdBQUcsRUFBSXRLLENBQUMsQ0FBQ3NHLE9BQUYsQ0FBVWdFLEdBQVYsQ0FBUCxDQUF3QkEsR0FBeEIsQ0FBOEIsRUFiNUM7QUFjZXRLLENBQUMsQ0FBQzhLLE1BQUYsQ0FBU1AsSUFBVCxDQWRmO0FBZU1FLEtBQUssQ0FBRyxHQUFJTSxDQUFBQSxJQUFKLENBQVNSLElBQUksQ0FBQ1MsT0FBTCxFQUFULENBZmQ7O0FBaUJNUCxLQUFLLENBQUdILEdBQUcsRUFBSXRLLENBQUMsQ0FBQzBHLFFBQUYsQ0FBVzRELEdBQVgsQ0FBUCxDQUF5QkEsR0FBekIsQ0FBK0IsRUFqQjdDOzs7O0FBcUJJSSxNQUFNLENBQUM5RyxJQUFELENBQU4sQ0FBZXhELE9BQU8sQ0FBQ3dILFVBQVIsQ0FBbUJnRCxJQUFuQixDQUF5QkgsS0FBekIsQ0FBZ0NGLElBQWhDLENBckJuQjs7QUF1QklHLE1BQU0sQ0FBQzlHLElBQUQsQ0FBTixDQUFlMkcsSUF2Qm5COzs7Ozs7O0FBOEJKLE1BQU9HLENBQUFBLE1BQVA7QUFDRCxDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAY2xhc3MgQWxsb3lcbiAqIFRvcC1sZXZlbCBtb2R1bGUgZm9yIEFsbG95IGZ1bmN0aW9ucy5cbiAqXG4gKiBBbGxveSBpcyBhbiBhcHBsaWNhdGlvbiBmcmFtZXdvcmsgYnVpbHQgb24gdG9wIG9mIHRoZSBUaXRhbml1bSBTREsgZGVzaWduZWQgdG8gaGVscCByYXBpZGx5XG4gKiBkZXZlbG9wIGhpZ2ggcXVhbGl0eSBhcHBsaWNhdGlvbnMgYW5kIHJlZHVjZSBtYWludGVuYW5jZS5cbiAqXG4gKiBBbGxveSB1c2VzIHRoZSBtb2RlbC12aWV3LWNvbnRyb2xsZXIgYXJjaGl0ZWN0dXJlIHRvIHNlcGFyYXRlIHRoZSBhcHBsaWNhdGlvbiBpbnRvIHRocmVlXG4gKiBjb21wb25lbnRzOlxuICpcbiAqICAqICoqTW9kZWxzKiogcHJvdmlkZSB0aGUgZGF0YSBvZiB0aGUgYXBwbGljYXRpb24uIEFsbG95IHV0aWxpemVzICoqQmFja2JvbmUgTW9kZWwgYW5kIENvbGxlY3Rpb24qKlxuICogICAgIG9iamVjdHMgZm9yIHRoaXMgZnVuY3Rpb25hbGl0eS5cbiAqXG4gKiAgKiAqKlZpZXdzKiogcHJvdmlkZSB0aGUgVUkgY29tcG9uZW50cyB0byBpbnRlcmFjdCB3aXRoIHRoZSBhcHBsaWNhdGlvbiwgd3JpdHRlbiB1c2luZyAqKlhNTCBtYXJrdXAqKlxuICogICAgYW5kICoqVGl0YW5pdW0gU3R5bGVzaGVldHMgKFRTUykqKiwgd2hpY2ggYWJzdHJhY3RzIHRoZSBVSSBjb21wb25lbnRzIG9mIHRoZSBUaXRhbml1bSBBUEkuXG4gKlxuICogICogKipDb250cm9sbGVycyoqIHByb3ZpZGUgdGhlIGdsdWUgbGF5ZXIgYmV0d2VlbiB0aGUgTW9kZWwgYW5kIFZpZXcgY29tcG9uZW50cyBhcyB3ZWxsIGFzXG4gKiAgICBhZGRpdGlvbmFsIGFwcGxpY2F0aW9uIGxvZ2ljIHVzaW5nIHRoZSAqKkFsbG95IEFQSSoqIGFuZCAqKlRpdGFuaXVtIEFQSSoqLlxuICpcbiAqIFRoZSBBUEkgZG9jdW1lbnRhdGlvbiBwcm92aWRlZCBoZXJlIGlzIHVzZWQgd2l0aCBBbGxveSBDb250cm9sbGVycyBhbmQgV2lkZ2V0IENvbnRyb2xsZXJzIHRvXG4gKiBpbnRlcmFjdCB3aXRoIHRoZSBWaWV3IGFuZCBNb2RlbCBjb21wb25lbnRzIG9mIHRoZSBhcHBsaWNhdGlvbiBvciB3aWRnZXQuXG4gKlxuICogRm9yIGd1aWRlcyBvbiB1c2luZyBBbGxveSwgc2VlXG4gKiBbQWxsb3kgRnJhbWV3b3JrXShodHRwOi8vZG9jcy5hcHBjZWxlcmF0b3IuY29tL3BsYXRmb3JtL2xhdGVzdC8jIS9ndWlkZS9BbGxveV9GcmFtZXdvcmspLlxuICovXG52YXIgXyA9IHJlcXVpcmUoJy9hbGxveS91bmRlcnNjb3JlJykuXyxcbkJhY2tib25lID0gcmVxdWlyZSgnL2FsbG95L2JhY2tib25lJyksXG5DT05TVCA9IHJlcXVpcmUoJy9hbGxveS9jb25zdGFudHMnKTtcblxuZXhwb3J0cy52ZXJzaW9uID0gJzEuMTcuMSc7XG5leHBvcnRzLl8gPSBfO1xuZXhwb3J0cy5CYWNrYm9uZSA9IEJhY2tib25lO1xuXG52YXIgREVGQVVMVF9XSURHRVQgPSAnd2lkZ2V0JztcbnZhciBNVzMyMF9DSEVDSyA9IGZhbHNlO1xudmFyIElERU5USVRZX1RSQU5TRk9STSA9IHRydWUgPyBUaS5VSS5jcmVhdGVNYXRyaXgyRCA/IFRpLlVJLmNyZWF0ZU1hdHJpeDJEKCkgOiBUaS5VSS5jcmVhdGUyRE1hdHJpeCgpIDogdW5kZWZpbmVkO1xudmFyIFJFU0VUID0ge1xuICBib3R0b206IG51bGwsXG4gIGxlZnQ6IG51bGwsXG4gIHJpZ2h0OiBudWxsLFxuICB0b3A6IG51bGwsXG4gIGhlaWdodDogbnVsbCxcbiAgd2lkdGg6IG51bGwsXG4gIHNoYWRvd0NvbG9yOiBudWxsLFxuICBzaGFkb3dPZmZzZXQ6IG51bGwsXG4gIGJhY2tncm91bmRJbWFnZTogbnVsbCxcbiAgYmFja2dyb3VuZFJlcGVhdDogbnVsbCxcbiAgY2VudGVyOiBudWxsLFxuICBsYXlvdXQ6IG51bGwsXG4gIGJhY2tncm91bmRTZWxlY3RlZENvbG9yOiBudWxsLFxuICBiYWNrZ3JvdW5kU2VsZWN0ZWRJbWFnZTogbnVsbCxcblxuICAvLyBub24tbnVsbCByZXNldHNcbiAgb3BhY2l0eTogMS4wLFxuICB0b3VjaEVuYWJsZWQ6IHRydWUsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIGhvcml6b250YWxXcmFwOiB0cnVlLFxuICB6SW5kZXg6IDAsXG5cbiAgLy8jIyMjIyBESVNQQVJJVElFUyAjIyMjIy8vXG5cbiAgLy8gU2V0dGluZyB0byBcIm51bGxcIiBvbiBhbmRyb2lkIHdvcmtzIHRoZSBmaXJzdCB0aW1lLiBMZWF2ZXMgdGhlIGNvbG9yXG4gIC8vIG9uIHN1YnNlcXVlbnQgY2FsbHMuXG4gIGJhY2tncm91bmRDb2xvcjogdHJ1ZSA/ICd0cmFuc3BhcmVudCcgOiBudWxsLFxuXG4gIC8vIGNyZWF0ZXMgYSBmb250IHNsaWdodGx5IGRpZmZlcmVudCAoc21hbGxlcikgdGhhbiBkZWZhdWx0IG9uIGlPU1xuICAvLyBodHRwczovL2ppcmEuYXBwY2VsZXJhdG9yLm9yZy9icm93c2UvVElNT0ItMTQ1NjVcbiAgZm9udDogbnVsbCxcblxuICAvLyBUaHJvd3MgYW4gZXhjZXB0aW9uIG9uIEFuZHJvaWQgaWYgc2V0IHRvIG51bGwuIFdvcmtzIG9uIG90aGVyIHBsYXRmb3Jtcy5cbiAgLy8gaHR0cHM6Ly9qaXJhLmFwcGNlbGVyYXRvci5vcmcvYnJvd3NlL1RJTU9CLTE0NTY2XG4gIHZpc2libGU6IHRydWUsXG5cbiAgLy8gU2V0dGluZyB0byBcIm51bGxcIiBvbiBhbmRyb2lkIG1ha2VzIHRleHQgdHJhbnNwYXJlbnRcbiAgLy8gaHR0cHM6Ly9qaXJhLmFwcGNlbGVyYXRvci5vcmcvYnJvd3NlL1RJTU9CLTE0NTY3XG4gIGNvbG9yOiB0cnVlID8gJyMwMDAnIDogbnVsbCxcblxuICAvLyBBbmRyb2lkIHdpbGwgbGVhdmUgYXJ0aWZhY3Qgb2YgcHJldmlvdXMgdHJhbnNmb3JtIHVubGVzcyB0aGUgaWRlbnRpdHkgbWF0cml4IGlzXG4gIC8vIG1hbnVhbGx5IHJlc2V0LlxuICAvLyBodHRwczovL2ppcmEuYXBwY2VsZXJhdG9yLm9yZy9icm93c2UvVElNT0ItMTQ1NjhcbiAgLy9cbiAgLy8gTW9iaWxld2ViIGRvZXMgbm90IHJlc3BlY3QgbWF0cml4IHByb3BlcnRpZXMgc2V0IGluIHRoZSBjb25zdHJ1Y3RvciwgZGVzcGl0ZSB0aGVcbiAgLy8gZG9jdW1lbnRhdGlvbiBhdCBkb2NzLmFwcGNlbGVyYXRvci5jb20gaW5kaWNhdGluZyB0aGF0IGl0IHNob3VsZC5cbiAgLy8gaHR0cHM6Ly9qaXJhLmFwcGNlbGVyYXRvci5vcmcvYnJvd3NlL1RJTU9CLTE0NTcwXG4gIHRyYW5zZm9ybTogdHJ1ZSA/IElERU5USVRZX1RSQU5TRk9STSA6IG51bGwsXG5cbiAgLy8gQ3Jhc2hlcyBpZiBzZXQgdG8gbnVsbCBvbiBhbnl0aGluZyBidXQgQW5kcm9pZFxuICAvLyBodHRwczovL2ppcmEuYXBwY2VsZXJhdG9yLm9yZy9icm93c2UvVElNT0ItMTQ1NzFcbiAgYmFja2dyb3VuZEdyYWRpZW50OiAhdHJ1ZSA/IHt9IDogbnVsbCxcblxuICAvLyBBbGwgc3VwcG9ydGVkIHBsYXRmb3JtcyBoYXZlIHZhcnlpbmcgYmVoYXZpb3Igd2l0aCBib3JkZXIgcHJvcGVydGllc1xuICAvLyBodHRwczovL2ppcmEuYXBwY2VsZXJhdG9yLm9yZy9icm93c2UvVElNT0ItMTQ1NzNcbiAgYm9yZGVyQ29sb3I6IHRydWUgPyBudWxsIDogJ3RyYW5zcGFyZW50JyxcblxuICAvLyBodHRwczovL2ppcmEuYXBwY2VsZXJhdG9yLm9yZy9icm93c2UvVElNT0ItMTQ1NzVcbiAgYm9yZGVyUmFkaXVzOiBmYWxzZSA/IDAgOiBudWxsLFxuXG4gIC8vIGh0dHBzOi8vamlyYS5hcHBjZWxlcmF0b3Iub3JnL2Jyb3dzZS9USU1PQi0xNDU3NFxuICBib3JkZXJXaWR0aDogZmFsc2UgPyAwIDogbnVsbCB9O1xuXG5cbmlmIChmYWxzZSkge1xuICBSRVNFVCA9IF8uZXh0ZW5kKFJFU0VULCB7XG4gICAgYmFja2dyb3VuZExlZnRDYXA6IDAsXG4gICAgYmFja2dyb3VuZFRvcENhcDogMCB9KTtcblxufSBlbHNlIGlmICh0cnVlKSB7XG4gIFJFU0VUID0gXy5leHRlbmQoUkVTRVQsIHtcbiAgICBiYWNrZ3JvdW5kRGlzYWJsZWRDb2xvcjogbnVsbCxcbiAgICBiYWNrZ3JvdW5kRGlzYWJsZWRJbWFnZTogbnVsbCxcbiAgICBiYWNrZ3JvdW5kRm9jdXNlZENvbG9yOiBudWxsLFxuICAgIGJhY2tncm91bmRGb2N1c2VkSW1hZ2U6IG51bGwsXG4gICAgZm9jdXNhYmxlOiBmYWxzZSxcbiAgICBrZWVwU2NyZWVuT246IGZhbHNlIH0pO1xuXG59XG5cbmZ1bmN0aW9uIHVjZmlyc3QodGV4dCkge1xuICBpZiAoIXRleHQpIHtyZXR1cm4gdGV4dDt9XG4gIHJldHVybiB0ZXh0WzBdLnRvVXBwZXJDYXNlKCkgKyB0ZXh0LnN1YnN0cigxKTtcbn1cblxuZnVuY3Rpb24gYWRkTmFtZXNwYWNlKGFwaU5hbWUpIHtcbiAgcmV0dXJuIChDT05TVC5JTVBMSUNJVF9OQU1FU1BBQ0VTW2FwaU5hbWVdIHx8IENPTlNULk5BTUVTUEFDRV9ERUZBVUxUKSArXG4gICcuJyArIGFwaU5hbWU7XG59XG5cbmV4cG9ydHMuTSA9IGZ1bmN0aW9uIChuYW1lLCBtb2RlbERlc2MsIG1pZ3JhdGlvbnMpIHtcbiAgdmFyIGNvbmZpZyA9IChtb2RlbERlc2MgfHwge30pLmNvbmZpZyB8fCB7fTtcbiAgdmFyIGFkYXB0ZXIgPSBjb25maWcuYWRhcHRlciB8fCB7fTtcbiAgdmFyIGV4dGVuZE9iaiA9IHt9O1xuICB2YXIgZXh0ZW5kQ2xhc3MgPSB7fTtcbiAgdmFyIG1vZDtcblxuICBpZiAoYWRhcHRlci50eXBlKSB7XG4gICAgbW9kID0gcmVxdWlyZSgnL2FsbG95L3N5bmMvJyArIGFkYXB0ZXIudHlwZSk7XG4gICAgZXh0ZW5kT2JqLnN5bmMgPSBmdW5jdGlvbiAobWV0aG9kLCBtb2RlbCwgb3B0cykge1xuICAgICAgcmV0dXJuIG1vZC5zeW5jKG1ldGhvZCwgbW9kZWwsIG9wdHMpO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgZXh0ZW5kT2JqLnN5bmMgPSBmdW5jdGlvbiAobWV0aG9kLCBtb2RlbCwgb3B0cykge1xuICAgICAgVGkuQVBJLndhcm4oJ0V4ZWN1dGlvbiBvZiAnICsgbWV0aG9kICsgJyNzeW5jKCkgZnVuY3Rpb24gb24gYSBtb2RlbCB0aGF0IGRvZXMgbm90IHN1cHBvcnQgcGVyc2lzdGVuY2UnKTtcbiAgICAgIFRpLkFQSS53YXJuKCdtb2RlbDogJyArIEpTT04uc3RyaW5naWZ5KG1vZGVsLnRvSlNPTigpKSk7XG4gICAgfTtcbiAgfVxuICBleHRlbmRPYmouZGVmYXVsdHMgPSBjb25maWcuZGVmYXVsdHM7XG5cbiAgLy8gY29uc3RydWN0IHRoZSBtb2RlbCBiYXNlZCBvbiB0aGUgY3VycmVudCBhZGFwdGVyIHR5cGVcbiAgaWYgKG1pZ3JhdGlvbnMpIHtleHRlbmRDbGFzcy5taWdyYXRpb25zID0gbWlncmF0aW9uczt9XG5cbiAgLy8gUnVuIHRoZSBwcmUgbW9kZWwgY3JlYXRpb24gY29kZSwgaWYgYW55XG4gIGlmIChtb2QgJiYgXy5pc0Z1bmN0aW9uKG1vZC5iZWZvcmVNb2RlbENyZWF0ZSkpIHtcbiAgICBjb25maWcgPSBtb2QuYmVmb3JlTW9kZWxDcmVhdGUoY29uZmlnLCBuYW1lKSB8fCBjb25maWc7XG4gIH1cblxuICAvLyBDcmVhdGUgdGhlIE1vZGVsIG9iamVjdFxuICB2YXIgTW9kZWwgPSBCYWNrYm9uZS5Nb2RlbC5leHRlbmQoZXh0ZW5kT2JqLCBleHRlbmRDbGFzcyk7XG4gIE1vZGVsLnByb3RvdHlwZS5jb25maWcgPSBjb25maWc7XG5cbiAgLy8gRXh0ZW5kIHRoZSBNb2RlbCB3aXRoIGV4dGVuZE1vZGVsKCksIGlmIGRlZmluZWRcbiAgaWYgKF8uaXNGdW5jdGlvbihtb2RlbERlc2MuZXh0ZW5kTW9kZWwpKSB7XG4gICAgTW9kZWwgPSBtb2RlbERlc2MuZXh0ZW5kTW9kZWwoTW9kZWwpIHx8IE1vZGVsO1xuICB9XG5cbiAgLy8gUnVuIHRoZSBwb3N0IG1vZGVsIGNyZWF0aW9uIGNvZGUsIGlmIGFueVxuICBpZiAobW9kICYmIF8uaXNGdW5jdGlvbihtb2QuYWZ0ZXJNb2RlbENyZWF0ZSkpIHtcbiAgICBtb2QuYWZ0ZXJNb2RlbENyZWF0ZShNb2RlbCwgbmFtZSk7XG4gIH1cblxuICByZXR1cm4gTW9kZWw7XG59O1xuXG5leHBvcnRzLkMgPSBmdW5jdGlvbiAobmFtZSwgbW9kZWxEZXNjLCBtb2RlbCkge1xuICB2YXIgZXh0ZW5kT2JqID0geyBtb2RlbDogbW9kZWwgfTtcbiAgdmFyIGNvbmZpZyA9IChtb2RlbCA/IG1vZGVsLnByb3RvdHlwZS5jb25maWcgOiB7fSkgfHwge307XG4gIHZhciBtb2Q7XG5cbiAgaWYgKGNvbmZpZy5hZGFwdGVyICYmIGNvbmZpZy5hZGFwdGVyLnR5cGUpIHtcbiAgICBtb2QgPSByZXF1aXJlKCcvYWxsb3kvc3luYy8nICsgY29uZmlnLmFkYXB0ZXIudHlwZSk7XG4gICAgZXh0ZW5kT2JqLnN5bmMgPSBmdW5jdGlvbiAobWV0aG9kLCBtb2RlbCwgb3B0cykge1xuICAgICAgcmV0dXJuIG1vZC5zeW5jKG1ldGhvZCwgbW9kZWwsIG9wdHMpO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgZXh0ZW5kT2JqLnN5bmMgPSBmdW5jdGlvbiAobWV0aG9kLCBtb2RlbCwgb3B0cykge1xuICAgICAgVGkuQVBJLndhcm4oJ0V4ZWN1dGlvbiBvZiAnICsgbWV0aG9kICsgJyNzeW5jKCkgZnVuY3Rpb24gb24gYSBjb2xsZWN0aW9uIHRoYXQgZG9lcyBub3Qgc3VwcG9ydCBwZXJzaXN0ZW5jZScpO1xuICAgICAgVGkuQVBJLndhcm4oJ21vZGVsOiAnICsgSlNPTi5zdHJpbmdpZnkobW9kZWwudG9KU09OKCkpKTtcbiAgICB9O1xuICB9XG5cbiAgdmFyIENvbGxlY3Rpb24gPSBCYWNrYm9uZS5Db2xsZWN0aW9uLmV4dGVuZChleHRlbmRPYmopO1xuICBDb2xsZWN0aW9uLnByb3RvdHlwZS5jb25maWcgPSBjb25maWc7XG5cbiAgLy8gZXh0ZW5kIHRoZSBjb2xsZWN0aW9uIG9iamVjdFxuICBpZiAoXy5pc0Z1bmN0aW9uKG1vZGVsRGVzYy5leHRlbmRDb2xsZWN0aW9uKSkge1xuICAgIENvbGxlY3Rpb24gPSBtb2RlbERlc2MuZXh0ZW5kQ29sbGVjdGlvbihDb2xsZWN0aW9uKSB8fCBDb2xsZWN0aW9uO1xuICB9XG5cbiAgLy8gZG8gYW55IHBvc3QgY29sbGVjdGlvbiBjcmVhdGlvbiBjb2RlIGZvcm0gdGhlIHN5bmMgYWRhcHRlclxuICBpZiAobW9kICYmIF8uaXNGdW5jdGlvbihtb2QuYWZ0ZXJDb2xsZWN0aW9uQ3JlYXRlKSkge1xuICAgIG1vZC5hZnRlckNvbGxlY3Rpb25DcmVhdGUoQ29sbGVjdGlvbik7XG4gIH1cblxuICByZXR1cm4gQ29sbGVjdGlvbjtcbn07XG5cbmV4cG9ydHMuVUkgPSB7fTtcbmV4cG9ydHMuVUkuY3JlYXRlID0gZnVuY3Rpb24gKGNvbnRyb2xsZXIsIGFwaU5hbWUsIG9wdHMpIHtcbiAgb3B0cyA9IG9wdHMgfHwge307XG5cbiAgLy8gTWFrZSBzdXJlIHdlIGhhdmUgYSBmdWxsIGFwaSBuYW1lXG4gIHZhciBiYXNlTmFtZSwgbnM7XG4gIHZhciBwYXJ0cyA9IGFwaU5hbWUuc3BsaXQoJy4nKTtcbiAgaWYgKHBhcnRzLmxlbmd0aCA9PT0gMSkge1xuICAgIGJhc2VOYW1lID0gYXBpTmFtZTtcbiAgICBucyA9IG9wdHMubnMgfHwgQ09OU1QuSU1QTElDSVRfTkFNRVNQQUNFU1tiYXNlTmFtZV0gfHwgQ09OU1QuTkFNRVNQQUNFX0RFRkFVTFQ7XG4gIH0gZWxzZSBpZiAocGFydHMubGVuZ3RoID4gMSkge1xuICAgIGJhc2VOYW1lID0gcGFydHNbcGFydHMubGVuZ3RoIC0gMV07XG4gICAgbnMgPSBwYXJ0cy5zbGljZSgwLCBwYXJ0cy5sZW5ndGggLSAxKS5qb2luKCcuJyk7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgJ0FsbG95LlVJLmNyZWF0ZSgpIGZhaWxlZDogTm8gQVBJIG5hbWUgd2FzIGdpdmVuIGluIHRoZSBzZWNvbmQgcGFyYW1ldGVyJztcbiAgfVxuICBvcHRzLmFwaU5hbWUgPSBucyArICcuJyArIGJhc2VOYW1lO1xuICBiYXNlTmFtZSA9IGJhc2VOYW1lWzBdLnRvVXBwZXJDYXNlKCkgKyBiYXNlTmFtZS5zdWJzdHIoMSk7XG5cbiAgLy8gZ2VuZXJhdGUgdGhlIHN0eWxlIG9iamVjdFxuICB2YXIgc3R5bGUgPSBleHBvcnRzLmNyZWF0ZVN0eWxlKGNvbnRyb2xsZXIsIG9wdHMpO1xuXG4gIC8vIGNyZWF0ZSB0aGUgdGl0YW5pdW0gcHJveHkgb2JqZWN0XG4gIHJldHVybiBldmFsKG5zKVsnY3JlYXRlJyArIGJhc2VOYW1lXShzdHlsZSk7XG59O1xuXG5leHBvcnRzLmNyZWF0ZVN0eWxlID0gZnVuY3Rpb24gKGNvbnRyb2xsZXIsIG9wdHMsIGRlZmF1bHRzKSB7XG4gIHZhciBjbGFzc2VzLCBhcGlOYW1lO1xuXG4gIC8vIElmIHRoZXJlJ3Mgbm8gb3B0cywgdGhlcmUncyBubyByZWFzb24gdG8gbG9hZCB0aGUgc3R5bGUgbW9kdWxlLiBKdXN0XG4gIC8vIHJldHVybiBhbiBlbXB0eSBvYmplY3QuXG4gIGlmICghb3B0cykge3JldHVybiB7fTt9XG5cbiAgLy8gbWFrZSBvcHRzLmNsYXNzZXMgYW4gYXJyYXkgaWYgaXQgaXNuJ3QgYWxyZWFkeVxuICBpZiAoXy5pc0FycmF5KG9wdHMuY2xhc3NlcykpIHtcbiAgICBjbGFzc2VzID0gb3B0cy5jbGFzc2VzLnNsaWNlKDApO1xuICB9IGVsc2UgaWYgKF8uaXNTdHJpbmcob3B0cy5jbGFzc2VzKSkge1xuICAgIGNsYXNzZXMgPSBvcHRzLmNsYXNzZXMuc3BsaXQoL1xccysvKTtcbiAgfSBlbHNlIHtcbiAgICBjbGFzc2VzID0gW107XG4gIH1cblxuICAvLyBnaXZlIG9wdHMuYXBpTmFtZSBhIG5hbWVzcGFjZSBpZiBpdCBkb2Vzbid0IGhhdmUgb25lIGFscmVhZHlcbiAgYXBpTmFtZSA9IG9wdHMuYXBpTmFtZTtcbiAgaWYgKGFwaU5hbWUgJiYgYXBpTmFtZS5pbmRleE9mKCcuJykgPT09IC0xKSB7XG4gICAgYXBpTmFtZSA9IGFkZE5hbWVzcGFjZShhcGlOYW1lKTtcbiAgfVxuXG4gIC8vIFRPRE86IGNoZWNrIGNhY2hlZCBzdHlsZXMgYmFzZWQgb24gb3B0cyBhbmQgY29udHJvbGxlclxuXG4gIC8vIExvYWQgdGhlIHJ1bnRpbWUgc3R5bGUgZm9yIHRoZSBnaXZlbiBjb250cm9sbGVyXG4gIHZhciBzdHlsZUFycmF5O1xuICBpZiAoY29udHJvbGxlciAmJiBfLmlzT2JqZWN0KGNvbnRyb2xsZXIpKSB7XG4gICAgc3R5bGVBcnJheSA9IHJlcXVpcmUoJy9hbGxveS93aWRnZXRzLycgKyBjb250cm9sbGVyLndpZGdldElkICtcbiAgICAnL3N0eWxlcy8nICsgY29udHJvbGxlci5uYW1lKTtcbiAgfSBlbHNlIHtcbiAgICBzdHlsZUFycmF5ID0gcmVxdWlyZSgnL2FsbG95L3N0eWxlcy8nICsgY29udHJvbGxlcik7XG4gIH1cbiAgdmFyIHN0eWxlRmluYWwgPSB7fTtcblxuICAvLyBpdGVyYXRlIHRocm91Z2ggYWxsIHN0eWxlc1xuICB2YXIgaSwgbGVuO1xuICBmb3IgKGkgPSAwLCBsZW4gPSBzdHlsZUFycmF5Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgdmFyIHN0eWxlID0gc3R5bGVBcnJheVtpXTtcblxuICAgIC8vIGdpdmUgdGhlIGFwaU5hbWUgYSBuYW1lc3BhY2UgaWYgbmVjZXNzYXJ5XG4gICAgdmFyIHN0eWxlQXBpID0gc3R5bGUua2V5O1xuICAgIGlmIChzdHlsZS5pc0FwaSAmJiBzdHlsZUFwaS5pbmRleE9mKCcuJykgPT09IC0xKSB7XG4gICAgICBzdHlsZUFwaSA9IChDT05TVC5JTVBMSUNJVF9OQU1FU1BBQ0VTW3N0eWxlQXBpXSB8fFxuICAgICAgQ09OU1QuTkFNRVNQQUNFX0RFRkFVTFQpICsgJy4nICsgc3R5bGVBcGk7XG4gICAgfVxuXG4gICAgLy8gZG9lcyB0aGlzIHN0eWxlIG1hdGNoIHRoZSBnaXZlbiBvcHRzP1xuICAgIGlmIChzdHlsZS5pc0lkICYmIG9wdHMuaWQgJiYgc3R5bGUua2V5ID09PSBvcHRzLmlkIHx8XG4gICAgc3R5bGUuaXNDbGFzcyAmJiBfLmNvbnRhaW5zKGNsYXNzZXMsIHN0eWxlLmtleSkpIHtcbiAgICAgIC8vIGRvIG5vdGhpbmcgaGVyZSwga2VlcCBvbiBwcm9jZXNzaW5nXG4gICAgfSBlbHNlIGlmIChzdHlsZS5pc0FwaSkge1xuICAgICAgaWYgKHN0eWxlLmtleS5pbmRleE9mKCcuJykgPT09IC0xKSB7XG4gICAgICAgIHN0eWxlLmtleSA9IGFkZE5hbWVzcGFjZShzdHlsZS5rZXkpO1xuICAgICAgfVxuICAgICAgaWYgKHN0eWxlLmtleSAhPT0gYXBpTmFtZSkge2NvbnRpbnVlO31cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gbm8gbWF0Y2hlcywgc2tpcCB0aGlzIHN0eWxlXG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyBjYW4gd2UgY2xlYXIgb3V0IGFueSBmb3JtIGZhY3RvciBxdWVyaWVzP1xuICAgIGlmIChzdHlsZS5xdWVyaWVzICYmIHN0eWxlLnF1ZXJpZXMuZm9ybUZhY3RvciAmJlxuICAgICFleHBvcnRzW3N0eWxlLnF1ZXJpZXMuZm9ybUZhY3Rvcl0pIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIHByb2Nlc3MgcnVudGltZSBjdXN0b20gcXVlcmllc1xuICAgIGlmIChzdHlsZS5xdWVyaWVzICYmIHN0eWxlLnF1ZXJpZXMuaWYgJiYgKFxuICAgIHN0eWxlLnF1ZXJpZXMuaWYudHJpbSgpLnRvTG93ZXJDYXNlKCkgPT09ICdmYWxzZScgfHxcbiAgICBzdHlsZS5xdWVyaWVzLmlmLmluZGV4T2YoJ0FsbG95Lkdsb2JhbHMnKSAhPT0gLTEgJiZcbiAgICBleHBvcnRzLkdsb2JhbHNbc3R5bGUucXVlcmllcy5pZi5zcGxpdCgnLicpWzJdXSA9PT0gZmFsc2UpKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyBNZXJnZSB0aGlzIHN0eWxlIGludG8gdGhlIGV4aXN0aW5nIHN0eWxlIG9iamVjdFxuICAgIGV4cG9ydHMuZGVlcEV4dGVuZCh0cnVlLCBzdHlsZUZpbmFsLCBzdHlsZS5zdHlsZSk7XG4gIH1cblxuICAvLyBUT0RPOiBjYWNoZSB0aGUgc3R5bGUgYmFzZWQgb24gdGhlIG9wdHMgYW5kIGNvbnRyb2xsZXJcblxuICAvLyBNZXJnZSByZW1haW5pbmcgZXh0cmEgc3R5bGUgcHJvcGVydGllcyBmcm9tIG9wdHMsIGlmIGFueVxuICB2YXIgZXh0cmFTdHlsZSA9IF8ub21pdChvcHRzLCBbXG4gIENPTlNULkNMQVNTX1BST1BFUlRZLFxuICBDT05TVC5BUElOQU1FX1BST1BFUlRZXSk7XG5cbiAgZXhwb3J0cy5kZWVwRXh0ZW5kKHRydWUsIHN0eWxlRmluYWwsIGV4dHJhU3R5bGUpO1xuICBzdHlsZUZpbmFsW0NPTlNULkNMQVNTX1BST1BFUlRZXSA9IGNsYXNzZXM7XG4gIHN0eWxlRmluYWxbQ09OU1QuQVBJTkFNRV9QUk9QRVJUWV0gPSBhcGlOYW1lO1xuXG4gIGlmIChNVzMyMF9DSEVDSykge2RlbGV0ZSBzdHlsZUZpbmFsW0NPTlNULkFQSU5BTUVfUFJPUEVSVFldO31cblxuICByZXR1cm4gZGVmYXVsdHMgPyBfLmRlZmF1bHRzKHN0eWxlRmluYWwsIGRlZmF1bHRzKSA6IHN0eWxlRmluYWw7XG59O1xuXG5mdW5jdGlvbiBwcm9jZXNzU3R5bGUoY29udHJvbGxlciwgcHJveHksIGNsYXNzZXMsIG9wdHMsIGRlZmF1bHRzKSB7XG4gIG9wdHMgPSBvcHRzIHx8IHt9O1xuICBvcHRzLmNsYXNzZXMgPSBjbGFzc2VzO1xuICBpZiAocHJveHkuYXBpTmFtZSkge29wdHMuYXBpTmFtZSA9IHByb3h5LmFwaU5hbWU7fVxuICBpZiAocHJveHkuaWQpIHtvcHRzLmlkID0gcHJveHkuaWQ7fVxuICBwcm94eS5hcHBseVByb3BlcnRpZXMoZXhwb3J0cy5jcmVhdGVTdHlsZShjb250cm9sbGVyLCBvcHRzLCBkZWZhdWx0cykpO1xuICBpZiAodHJ1ZSkge3Byb3h5LmNsYXNzZXMgPSBjbGFzc2VzO31cbn1cblxuZXhwb3J0cy5hZGRDbGFzcyA9IGZ1bmN0aW9uIChjb250cm9sbGVyLCBwcm94eSwgY2xhc3Nlcywgb3B0cykge1xuXG4gIC8vIG1ha2Ugc3VyZSB3ZSBhY3R1YWxseSBoYXZlIGNsYXNzZXMgdG8gYWRkXG4gIGlmICghY2xhc3Nlcykge1xuICAgIGlmIChvcHRzKSB7XG4gICAgICBpZiAoTVczMjBfQ0hFQ0spIHtkZWxldGUgb3B0cy5hcGlOYW1lO31cbiAgICAgIHByb3h5LmFwcGx5UHJvcGVydGllcyhvcHRzKTtcbiAgICB9XG4gICAgcmV0dXJuO1xuICB9IGVsc2Uge1xuICAgIC8vIGNyZWF0ZSBhIHVuaW9uIG9mIHRoZSBleGlzdGluZyBjbGFzc2VzIHdpdGggdGhlIG5ldyBvbmUocylcbiAgICB2YXIgcENsYXNzZXMgPSBwcm94eVtDT05TVC5DTEFTU19QUk9QRVJUWV0gfHwgW107XG4gICAgdmFyIGJlZm9yZUxlbiA9IHBDbGFzc2VzLmxlbmd0aDtcbiAgICBjbGFzc2VzID0gXy5pc1N0cmluZyhjbGFzc2VzKSA/IGNsYXNzZXMuc3BsaXQoL1xccysvKSA6IGNsYXNzZXM7XG4gICAgdmFyIG5ld0NsYXNzZXMgPSBfLnVuaW9uKHBDbGFzc2VzLCBjbGFzc2VzIHx8IFtdKTtcblxuICAgIC8vIG1ha2Ugc3VyZSB3ZSBhY3R1YWxseSBhZGRlZCBjbGFzc2VzIGJlZm9yZSBwcm9jZXNzaW5nIHN0eWxlc1xuICAgIGlmIChiZWZvcmVMZW4gPT09IG5ld0NsYXNzZXMubGVuZ3RoKSB7XG4gICAgICBpZiAob3B0cykge1xuICAgICAgICBpZiAoTVczMjBfQ0hFQ0spIHtkZWxldGUgb3B0cy5hcGlOYW1lO31cbiAgICAgICAgcHJveHkuYXBwbHlQcm9wZXJ0aWVzKG9wdHMpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9jZXNzU3R5bGUoY29udHJvbGxlciwgcHJveHksIG5ld0NsYXNzZXMsIG9wdHMpO1xuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0cy5yZW1vdmVDbGFzcyA9IGZ1bmN0aW9uIChjb250cm9sbGVyLCBwcm94eSwgY2xhc3Nlcywgb3B0cykge1xuICBjbGFzc2VzID0gY2xhc3NlcyB8fCBbXTtcbiAgdmFyIHBDbGFzc2VzID0gcHJveHlbQ09OU1QuQ0xBU1NfUFJPUEVSVFldIHx8IFtdO1xuICB2YXIgYmVmb3JlTGVuID0gcENsYXNzZXMubGVuZ3RoO1xuXG4gIC8vIG1ha2Ugc3VyZSB0aGVyZSdzIGNsYXNzZXMgdG8gcmVtb3ZlIGJlZm9yZSBwcm9jZXNzaW5nXG4gIGlmICghYmVmb3JlTGVuIHx8ICFjbGFzc2VzLmxlbmd0aCkge1xuICAgIGlmIChvcHRzKSB7XG4gICAgICBpZiAoTVczMjBfQ0hFQ0spIHtkZWxldGUgb3B0cy5hcGlOYW1lO31cbiAgICAgIHByb3h5LmFwcGx5UHJvcGVydGllcyhvcHRzKTtcbiAgICB9XG4gICAgcmV0dXJuO1xuICB9IGVsc2Uge1xuICAgIC8vIHJlbW92ZSB0aGUgZ2l2ZW4gY2xhc3MoZXMpXG4gICAgY2xhc3NlcyA9IF8uaXNTdHJpbmcoY2xhc3NlcykgPyBjbGFzc2VzLnNwbGl0KC9cXHMrLykgOiBjbGFzc2VzO1xuICAgIHZhciBuZXdDbGFzc2VzID0gXy5kaWZmZXJlbmNlKHBDbGFzc2VzLCBjbGFzc2VzKTtcblxuICAgIC8vIG1ha2Ugc3VyZSB0aGVyZSB3YXMgYWN0dWFsbHkgYSBkaWZmZXJlbmNlIGJlZm9yZSBwcm9jZXNzaW5nXG4gICAgaWYgKGJlZm9yZUxlbiA9PT0gbmV3Q2xhc3Nlcy5sZW5ndGgpIHtcbiAgICAgIGlmIChvcHRzKSB7XG4gICAgICAgIGlmIChNVzMyMF9DSEVDSykge2RlbGV0ZSBvcHRzLmFwaU5hbWU7fVxuICAgICAgICBwcm94eS5hcHBseVByb3BlcnRpZXMob3B0cyk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb2Nlc3NTdHlsZShjb250cm9sbGVyLCBwcm94eSwgbmV3Q2xhc3Nlcywgb3B0cywgUkVTRVQpO1xuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0cy5yZXNldENsYXNzID0gZnVuY3Rpb24gKGNvbnRyb2xsZXIsIHByb3h5LCBjbGFzc2VzLCBvcHRzKSB7XG4gIGNsYXNzZXMgPSBjbGFzc2VzIHx8IFtdO1xuICBjbGFzc2VzID0gXy5pc1N0cmluZyhjbGFzc2VzKSA/IGNsYXNzZXMuc3BsaXQoL1xccysvKSA6IGNsYXNzZXM7XG4gIHByb2Nlc3NTdHlsZShjb250cm9sbGVyLCBwcm94eSwgY2xhc3Nlcywgb3B0cywgUkVTRVQpO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIGNyZWF0ZVdpZGdldFxuICogRmFjdG9yeSBtZXRob2QgZm9yIGluc3RhbnRpYXRpbmcgYSB3aWRnZXQgY29udHJvbGxlci4gQ3JlYXRlcyBhbmQgcmV0dXJucyBhbiBpbnN0YW5jZSBvZiB0aGVcbiAqIG5hbWVkIHdpZGdldC5cbiAqIEBwYXJhbSB7U3RyaW5nfSBpZCBJZCBvZiB3aWRnZXQgdG8gaW5zdGFudGlhdGUuXG4gKiBAcGFyYW0ge1N0cmluZ30gW25hbWU9XCJ3aWRnZXRcIl0gTmFtZSBvZiB0aGUgdmlldyB3aXRoaW4gdGhlIHdpZGdldCB0byBpbnN0YW50aWF0ZSAoJ3dpZGdldCcgYnkgZGVmYXVsdClcbiAqIEBwYXJhbSB7T2JqZWN0fSBbYXJnc10gQXJndW1lbnRzIHRvIHBhc3MgdG8gdGhlIHdpZGdldC5cbiAqIEByZXR1cm4ge0FsbG95LkNvbnRyb2xsZXJ9IEFsbG95IHdpZGdldCBjb250cm9sbGVyIG9iamVjdC5cbiAqL1xuZXhwb3J0cy5jcmVhdGVXaWRnZXQgPSBmdW5jdGlvbiAoaWQsIG5hbWUsIGFyZ3MpIHtcbiAgaWYgKHR5cGVvZiBuYW1lICE9PSAndW5kZWZpbmVkJyAmJiBuYW1lICE9PSBudWxsICYmXG4gIF8uaXNPYmplY3QobmFtZSkgJiYgIV8uaXNTdHJpbmcobmFtZSkpIHtcbiAgICBhcmdzID0gbmFtZTtcbiAgICBuYW1lID0gREVGQVVMVF9XSURHRVQ7XG4gIH1cbiAgcmV0dXJuIG5ldyAocmVxdWlyZSgnL2FsbG95L3dpZGdldHMvJyArIGlkICsgJy9jb250cm9sbGVycy8nICsgKG5hbWUgfHwgREVGQVVMVF9XSURHRVQpKSkoYXJncyk7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgY3JlYXRlQ29udHJvbGxlclxuICogRmFjdG9yeSBtZXRob2QgZm9yIGluc3RhbnRpYXRpbmcgYSBjb250cm9sbGVyLiBDcmVhdGVzIGFuZCByZXR1cm5zIGFuIGluc3RhbmNlIG9mIHRoZVxuICogbmFtZWQgY29udHJvbGxlci5cbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIE5hbWUgb2YgY29udHJvbGxlciB0byBpbnN0YW50aWF0ZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbYXJnc10gQXJndW1lbnRzIHRvIHBhc3MgdG8gdGhlIGNvbnRyb2xsZXIuXG4gKiBAcmV0dXJuIHtBbGxveS5Db250cm9sbGVyfSBBbGxveSBjb250cm9sbGVyIG9iamVjdC5cbiAqL1xuZXhwb3J0cy5jcmVhdGVDb250cm9sbGVyID0gZnVuY3Rpb24gKG5hbWUsIGFyZ3MpIHtcbiAgcmV0dXJuIG5ldyAocmVxdWlyZSgnL2FsbG95L2NvbnRyb2xsZXJzLycgKyBuYW1lKSkoYXJncyk7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgY3JlYXRlTW9kZWxcbiAqIEZhY3RvcnkgbWV0aG9kIGZvciBpbnN0YW50aWF0aW5nIGEgQmFja2JvbmUgTW9kZWwgb2JqZWN0LiBDcmVhdGVzIGFuZCByZXR1cm5zIGFuIGluc3RhbmNlIG9mIHRoZVxuICogbmFtZWQgbW9kZWwuXG4gKlxuICogU2VlIFtCYWNrYm9uZS5Nb2RlbF0oaHR0cDovL2RvY3MuYXBwY2VsZXJhdG9yLmNvbS9iYWNrYm9uZS8wLjkuMi8jTW9kZWwpIGluIHRoZSBCYWNrYm9uZS5qcyBkb2N1bWVudGF0aW9uIGZvclxuICogaW5mb3JtYXRpb24gb24gdGhlIG1ldGhvZHMgYW5kIHByb3BlcnRpZXMgcHJvdmlkZWQgYnkgdGhlIE1vZGVsIG9iamVjdC5cbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIE5hbWUgb2YgbW9kZWwgdG8gaW5zdGFudGlhdGUuXG4gKiBAcGFyYW0ge09iamVjdH0gW2FyZ3NdIEFyZ3VtZW50cyB0byBwYXNzIHRvIHRoZSBtb2RlbC5cbiAqIEByZXR1cm4ge0JhY2tib25lLk1vZGVsfSBCYWNrYm9uZSBtb2RlbCBvYmplY3QuXG4gKi9cbmV4cG9ydHMuY3JlYXRlTW9kZWwgPSBmdW5jdGlvbiAobmFtZSwgYXJncykge1xuICByZXR1cm4gbmV3IChyZXF1aXJlKCcvYWxsb3kvbW9kZWxzLycgKyB1Y2ZpcnN0KG5hbWUpKS5Nb2RlbCkoYXJncyk7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgY3JlYXRlQ29sbGVjdGlvblxuICogRmFjdG9yeSBtZXRob2QgZm9yIGluc3RhbnRpYXRpbmcgYSBCYWNrYm9uZSBjb2xsZWN0aW9uIG9mIG1vZGVsIG9iamVjdHMuIENyZWF0ZXMgYW5kIHJldHVybnMgYVxuICogY29sbGVjdGlvbiBmb3IgaG9sZGluZyB0aGUgbmFtZWQgdHlwZSBvZiBtb2RlbCBvYmplY3RzLlxuICpcbiAqIFNlZSBbQmFja2JvbmUuQ29sbGVjdGlvbl0oaHR0cDovL2RvY3MuYXBwY2VsZXJhdG9yLmNvbS9iYWNrYm9uZS8wLjkuMi8jQ29sbGVjdGlvbikgaW4gdGhlIEJhY2tib25lLmpzXG4gKiBkb2N1bWVudGF0aW9uIGZvciAgaW5mb3JtYXRpb24gb24gdGhlIG1ldGhvZHMgYW5kICBwcm9wZXJ0aWVzIHByb3ZpZGVkIGJ5IHRoZVxuICogQ29sbGVjdGlvbiBvYmplY3QuXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZSBOYW1lIG9mIG1vZGVsIHRvIGhvbGQgaW4gdGhpcyBjb2xsZWN0aW9uLlxuICogQHBhcmFtIHtPYmplY3R9IFthcmdzXSBBcmd1bWVudHMgdG8gcGFzcyB0byB0aGUgY29sbGVjdGlvbi5cbiAqIEByZXR1cm4ge0JhY2tib25lLkNvbGxlY3Rpb259IEJhY2tib25lIGNvbGxlY3Rpb24gb2JqZWN0LlxuICovXG5leHBvcnRzLmNyZWF0ZUNvbGxlY3Rpb24gPSBmdW5jdGlvbiAobmFtZSwgYXJncykge1xuICByZXR1cm4gbmV3IChyZXF1aXJlKCcvYWxsb3kvbW9kZWxzLycgKyB1Y2ZpcnN0KG5hbWUpKS5Db2xsZWN0aW9uKShhcmdzKTtcbn07XG5cbmZ1bmN0aW9uIGlzVGFibGV0RmFsbGJhY2soKSB7XG4gIHJldHVybiBNYXRoLm1pbihcbiAgVGkuUGxhdGZvcm0uZGlzcGxheUNhcHMucGxhdGZvcm1IZWlnaHQsXG4gIFRpLlBsYXRmb3JtLmRpc3BsYXlDYXBzLnBsYXRmb3JtV2lkdGgpID49XG4gIDcwMDtcbn1cblxuLyoqXG4gKiBAcHJvcGVydHkge0Jvb2xlYW59IGlzVGFibGV0XG4gKiBgdHJ1ZWAgaWYgdGhlIGN1cnJlbnQgZGV2aWNlIGlzIGEgdGFibGV0LlxuICpcbiAqL1xuZXhwb3J0cy5pc1RhYmxldCA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKGZhbHNlKSB7XG4gICAgcmV0dXJuIFwiYW5kcm9pZFwiID09PSAnaXBhZCc7XG4gIH0gZWxzZSBpZiAodHJ1ZSkge1xuICAgIHZhciBwc2MgPSBUaS5QbGF0Zm9ybS5BbmRyb2lkLnBoeXNpY2FsU2l6ZUNhdGVnb3J5O1xuICAgIHJldHVybiBwc2MgPT09IFRpLlBsYXRmb3JtLkFuZHJvaWQuUEhZU0lDQUxfU0laRV9DQVRFR09SWV9MQVJHRSB8fFxuICAgIHBzYyA9PT0gVGkuUGxhdGZvcm0uQW5kcm9pZC5QSFlTSUNBTF9TSVpFX0NBVEVHT1JZX1hMQVJHRTtcbiAgfSBlbHNlIGlmIChmYWxzZSkge1xuICAgIHJldHVybiBNYXRoLm1pbihcbiAgICBUaS5QbGF0Zm9ybS5kaXNwbGF5Q2Fwcy5wbGF0Zm9ybUhlaWdodCxcbiAgICBUaS5QbGF0Zm9ybS5kaXNwbGF5Q2Fwcy5wbGF0Zm9ybVdpZHRoKSA+PVxuICAgIDQwMDtcbiAgICAvLyB9IGVsc2UgaWYgKE9TX0JMQUNLQkVSUlkpIHtcbiAgICAvLyBcdC8vIFRhYmxldHMgbm90IGN1cnJlbnRseSBzdXBwb3J0ZWQgYnkgQkIgVGlTREtcbiAgICAvLyBcdC8vIGh0dHBzOi8vamlyYS5hcHBjZWxlcmF0b3Iub3JnL2Jyb3dzZS9USU1PQi0xMzIyNVxuICAgIC8vIFx0cmV0dXJuIGZhbHNlO1xuICB9IGVsc2UgaWYgKGZhbHNlKSB7XG4gICAgLy8gcGVyIGh0dHA6Ly93d3cuZXh0cmVtZXRlY2guY29tL2NvbXB1dGluZy8xMzk3Njgtd2luZG93cy04LXNtYXJ0cGhvbmVzLWFuZC13aW5kb3dzLXBob25lLTgtdGFibGV0c1xuICAgIC8vIHRhYmxldHMgc2hvdWxkIGJlID49IDEwMjR4NzY4IGFuZCBwaG9uZXMgY291bGQgYmUgbG93ZXIsIHRob3VnaCBjdXJyZW50IHBob25lcyBhcmUgcnVubmluZyBhdFxuICAgIC8vIHRoZSAxMjgweDcyMCByYW5nZSBhbmQgaGlnaGVyXG4gICAgcmV0dXJuIE1hdGgubWF4KFxuICAgIFRpLlBsYXRmb3JtLmRpc3BsYXlDYXBzLnBsYXRmb3JtSGVpZ2h0LFxuICAgIFRpLlBsYXRmb3JtLmRpc3BsYXlDYXBzLnBsYXRmb3JtV2lkdGgpID49XG4gICAgMTAyNDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gaXNUYWJsZXRGYWxsYmFjaygpO1xuICB9XG59KCk7XG5cbi8qKlxuICogQHByb3BlcnR5IHtCb29sZWFufSBpc0hhbmRoZWxkXG4gKiBgdHJ1ZWAgaWYgdGhlIGN1cnJlbnQgZGV2aWNlIGlzIGEgaGFuZGhlbGQgZGV2aWNlIChub3QgYSB0YWJsZXQpLlxuICpcbiAqL1xuZXhwb3J0cy5pc0hhbmRoZWxkID0gIWV4cG9ydHMuaXNUYWJsZXQ7XG5cbi8qKlxuICogQHByb3BlcnR5IHtPYmplY3R9IEdsb2JhbHNcbiAqIEFuIG9iamVjdCBmb3Igc3RvcmluZyBnbG9iYWxseSBhY2Nlc3NpYmxlIHZhcmlhYmxlcyBhbmQgZnVuY3Rpb25zLlxuICogQWxsb3kuR2xvYmFscyBpcyBhY2Nlc3NpYmxlIGluIGFueSBjb250cm9sbGVyIGluIHlvdXIgYXBwOlxuICpcbiAqICAgICBBbGxveS5HbG9iYWxzLnNvbWVHbG9iYWxPYmplY3QgPSB7IGtleTogJ3ZhbHVlJyB9O1xuICogICAgIEFsbG95Lkdsb2JhbHMuc29tZUdsb2JhbEZ1bmN0aW9uID0gZnVuY3Rpb24oKXt9O1xuICpcbiAqIEFsbG95Lkdsb2JhbHMgY2FuIGJlIGFjY2Vzc2VkIGluIG90aGVyIG5vbi1jb250cm9sbGVyIEphdmFzY3JpcHQgZmlsZXNcbiAqIGxpa2UgdGhpczpcbiAqXG4gKiAgICAgdmFyIHRoZU9iamVjdCA9IHJlcXVpcmUoJ2FsbG95JykuR2xvYmFscy5zb21lR2xvYmFsT2JqZWN0O1xuICpcbiAqL1xuZXhwb3J0cy5HbG9iYWxzID0ge307XG5cbi8qKlxuICogQHByb3BlcnR5IHtPYmplY3R9IE1vZGVsc1xuICogQW4gb2JqZWN0IGZvciBzdG9yaW5nIGdsb2JhbGx5IGFjY2Vzc2libGUgQWxsb3kgbW9kZWxzLiBTaW5nbGV0b24gbW9kZWxzXG4gKiBjcmVhdGVkIHZpYSBtYXJrdXAgd2lsbCBiZSBzdG9yZWQgb24gdGhpcyBvYmplY3QuXG4gKlxuICogICAgIDxNb2RlbCBzcmM9XCJteU1vZGVsXCIvPlxuICpcbiAqIFRoZSBhYm92ZSBtYXJrdXAgd291bGQgZWZmZWN0aXZlbHkgZ2VuZXJhdGUgdGhlIGZvbGxvd2luZyBjb2RlOlxuICpcbiAqICAgICBBbGxveS5Nb2RlbHMubXlNb2RlbCA9IEFsbG95LmNyZWF0ZU1vZGVsKCdNeU1vZGVsJyk7XG4gKlxuICogQWxsb3kuTW9kZWxzLm15TW9kZWwgd291bGQgdGhlbiBiZSBhY2Nlc3NpYmxlIGluIGFueSBjb250cm9sbGVyIGluIHlvdXIgYXBwLlxuICpcbiAqL1xuZXhwb3J0cy5Nb2RlbHMgPSB7fTtcblxuLypcbiAqIENyZWF0ZXMgYSBzaW5nbGV0b24gaW5zdGFuY2Ugb2YgYSBNb2RlbCBiYXNlZCBvbiB0aGUgZ2l2ZW4gbW9kZWwsIG9yXG4gKiByZXR1cm5zIGFuIGV4aXN0aW5nIGluc3RhbmNlIGlmIG9uZSBoYXMgYWxyZWFkeSBiZWVuIGNyZWF0ZWQuXG4gKiBEb2N1bWVudGVkIGluIGRvY3MvYXBpZG9jL21vZGVsLmpzIGZvciBkb2NzIHNpdGUuXG4gKi9cbmV4cG9ydHMuTW9kZWxzLmluc3RhbmNlID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIGV4cG9ydHMuTW9kZWxzW25hbWVdIHx8IChleHBvcnRzLk1vZGVsc1tuYW1lXSA9IGV4cG9ydHMuY3JlYXRlTW9kZWwobmFtZSkpO1xufTtcblxuLyoqXG4gKiBAcHJvcGVydHkge09iamVjdH0gQ29sbGVjdGlvbnNcbiAqIEFuIG9iamVjdCBmb3Igc3RvcmluZyBnbG9iYWxseSBhY2Nlc3NpYmxlIEFsbG95IGNvbGxlY3Rpb25zLiBTaW5nbGV0b24gY29sbGVjdGlvbnNcbiAqIGNyZWF0ZWQgdmlhIG1hcmt1cCB3aWxsIGJlIHN0b3JlZCBvbiB0aGlzIG9iamVjdC5cbiAqXG4gKiAgICAgPENvbGxlY3Rpb24gc3JjPVwibXlNb2RlbFwiLz5cbiAqXG4gKiBUaGUgYWJvdmUgbWFya3VwIHdvdWxkIGVmZmVjdGl2ZWx5IGdlbmVyYXRlIHRoZSBmb2xsb3dpbmcgY29kZTpcbiAqXG4gKiAgICAgQWxsb3kuQ29sbGVjdGlvbnMubXlNb2RlbCA9IEFsbG95LmNyZWF0ZUNvbGxlY3Rpb24oJ015TW9kZWwnKTtcbiAqXG4gKiBBbGxveS5Db2xsZWN0aW9ucy5teU1vZGVsIHdvdWxkIHRoZW4gYmUgYWNjZXNzaWJsZSBpbiBhbnkgY29udHJvbGxlciBpbiB5b3VyIGFwcC5cbiAqXG4gKi9cbmV4cG9ydHMuQ29sbGVjdGlvbnMgPSB7fTtcblxuLypcbiAqIENyZWF0ZXMgYSBzaW5nbGV0b24gaW5zdGFuY2Ugb2YgYSBDb2xsZWN0aW9uIGJhc2VkIG9uIHRoZSBnaXZlbiBtb2RlbCwgb3JcbiAqIHJldHVybnMgYW4gZXhpc3RpbmcgaW5zdGFuY2UgaWYgb25lIGhhcyBhbHJlYWR5IGJlZW4gY3JlYXRlZC5cbiAqIERvY3VtZW50ZWQgaW4gZG9jcy9hcGlkb2MvY29sbGVjdGlvbi5qcyBmb3IgZG9jcyBzaXRlLlxuICovXG5leHBvcnRzLkNvbGxlY3Rpb25zLmluc3RhbmNlID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIGV4cG9ydHMuQ29sbGVjdGlvbnNbbmFtZV0gfHwgKGV4cG9ydHMuQ29sbGVjdGlvbnNbbmFtZV0gPSBleHBvcnRzLmNyZWF0ZUNvbGxlY3Rpb24obmFtZSkpO1xufTtcblxuLyoqXG4gKiBAcHJvcGVydHkge09iamVjdH0gQ0ZHXG4gKiBBbiBvYmplY3QgdGhhdCBzdG9yZXMgQWxsb3kgY29uZmlndXJhdGlvbiB2YWx1ZXMgYXMgZGVmaW5lZCBpbiB5b3VyIGFwcCdzXG4gKiBhcHAvY29uZmlnLmpzb24gZmlsZS4gSGVyZSdzIHdoYXQgYSB0eXBpY2FsIGNvbmZpZy5qc29uIGZpbGUgbWlnaHQgbG9va1xuICogbGlrZSBpbiBhbiBBbGxveSBhcHAuXG4gKlxuICogICAgIHtcbiAqICAgICAgICAgXCJnbG9iYWxcIjogeyBcImtleVwiOiBcImRlZmF1bHRWYWx1ZVwiLCBcImFub3RoZXJLZXlcIjogMTIzNDUgfSxcbiAqICAgICAgICAgXCJlbnY6ZGV2ZWxvcG1lbnRcIjoge30sXG4gKiAgICAgICAgIFwiZW52OnRlc3RcIjoge30sXG4gKiAgICAgICAgIFwiZW52OnByb2R1Y3Rpb25cIjoge30sXG4gKiAgICAgICAgIFwib3M6aW9zXCI6IHsgXCJrZXlcIjogXCJpb3NWYWx1ZVwiIH0sXG4gKiAgICAgICAgIFwib3M6YW5kcm9pZFwiOiB7IFwia2V5XCI6IFwiYW5kcm9pZFZhbHVlXCIgfSxcbiAqICAgICAgICAgXCJkZXBlbmRlbmNpZXNcIjoge31cbiAqICAgICB9XG4gKlxuICogSWYgdGhpcyBhcHAgd2FzIGNvbXBpbGVkIGZvciBpT1MsIHRoZSBBbGxveS5DRkcgd291bGQgbG9vayBsaWtlIHRoaXM6XG4gKlxuICogICAgIEFsbG95LkNGRyA9IHtcbiAqICAgICAgICAgXCJrZXlcIjogXCJpb3NWYWx1ZVwiLFxuICogICAgICAgICBcImFub3RoZXJLZXlcIjogMTIzNDVcbiAqICAgICB9XG4gKlxuICogQWxsb3kuQ0ZHIGlzIGFjY2Vzc2libGUgaW4gYW55IGNvbnRyb2xsZXIgaW4geW91ciBhcHAsIGFuZCBjYW4gYmUgYWNjZXNzZWRcbiAqIGluIG90aGVyIG5vbi1jb250cm9sbGVyIEphdmFzY3JpcHQgZmlsZXMgbGlrZSB0aGlzOlxuICpcbiAqICAgICB2YXIgdGhlS2V5ID0gcmVxdWlyZSgnYWxsb3knKS5DRkcua2V5O1xuICpcbiAqL1xuZXhwb3J0cy5DRkcgPSByZXF1aXJlKCcvYWxsb3kvQ0ZHJyk7XG5cbmlmICh0cnVlKSB7XG4gIGV4cG9ydHMuQW5kcm9pZCA9IHt9O1xuICBleHBvcnRzLkFuZHJvaWQubWVudUl0ZW1DcmVhdGVBcmdzID0gWydpdGVtSWQnLCAnZ3JvdXBJZCcsICd0aXRsZScsICdvcmRlcicsICdhY3Rpb25WaWV3JywgJ2NoZWNrYWJsZScsICdjaGVja2VkJywgJ2VuYWJsZWQnLCAnaWNvbicsICdzaG93QXNBY3Rpb24nLCAndGl0bGVDb25kZW5zZWQnLCAndmlzaWJsZSddO1xufVxuXG4vKlxuICogQWRhcHRlZCB2ZXJzaW9uIG9mIG5vZGUuZXh0ZW5kIGh0dHBzOi8vd3d3Lm5wbWpzLm9yZy9wYWNrYWdlL25vZGUuZXh0ZW5kXG4gKlxuICogT3JpZ2luYWwgY29weXJpZ2h0OlxuICpcbiAqIG5vZGUuZXh0ZW5kXG4gKiBDb3B5cmlnaHQgMjAxMSwgSm9obiBSZXNpZ1xuICogRHVhbCBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIG9yIEdQTCBWZXJzaW9uIDIgbGljZW5zZXMuXG4gKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKlxuICogQGZpbGVvdmVydmlld1xuICogUG9ydCBvZiBqUXVlcnkuZXh0ZW5kIHRoYXQgYWN0dWFsbHkgd29ya3Mgb24gbm9kZS5qc1xuICovXG5leHBvcnRzLmRlZXBFeHRlbmQgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB0YXJnZXQgPSBhcmd1bWVudHNbMF0gfHwge307XG4gIHZhciBpID0gMTtcbiAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBkZWVwID0gZmFsc2U7XG4gIHZhciBvcHRpb25zLCBuYW1lLCBzcmMsIGNvcHksIGNvcHlfaXNfYXJyYXksIGNsb25lO1xuXG4gIC8vIEhhbmRsZSBhIGRlZXAgY29weSBzaXR1YXRpb25cbiAgaWYgKHR5cGVvZiB0YXJnZXQgPT09ICdib29sZWFuJykge1xuICAgIGRlZXAgPSB0YXJnZXQ7XG4gICAgdGFyZ2V0ID0gYXJndW1lbnRzWzFdIHx8IHt9O1xuICAgIC8vIHNraXAgdGhlIGJvb2xlYW4gYW5kIHRoZSB0YXJnZXRcbiAgICBpID0gMjtcbiAgfVxuXG4gIC8vIEhhbmRsZSBjYXNlIHdoZW4gdGFyZ2V0IGlzIGEgc3RyaW5nIG9yIHNvbWV0aGluZyAocG9zc2libGUgaW4gZGVlcCBjb3B5KVxuICBpZiAodHlwZW9mIHRhcmdldCAhPT0gJ29iamVjdCcgJiYgIV8uaXNGdW5jdGlvbih0YXJnZXQpKSB7XG4gICAgdGFyZ2V0ID0ge307XG4gIH1cblxuICBmb3IgKDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgLy8gT25seSBkZWFsIHdpdGggbm9uLW51bGwvdW5kZWZpbmVkIHZhbHVlc1xuICAgIG9wdGlvbnMgPSBhcmd1bWVudHNbaV07XG4gICAgaWYgKG9wdGlvbnMgIT0gbnVsbCkge1xuICAgICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnc3RyaW5nJykge1xuICAgICAgICBvcHRpb25zID0gb3B0aW9ucy5zcGxpdCgnJyk7XG4gICAgICB9XG4gICAgICAvLyBFeHRlbmQgdGhlIGJhc2Ugb2JqZWN0XG4gICAgICBmb3IgKG5hbWUgaW4gb3B0aW9ucykge1xuICAgICAgICBzcmMgPSB0YXJnZXRbbmFtZV07XG4gICAgICAgIGNvcHkgPSBvcHRpb25zW25hbWVdO1xuXG4gICAgICAgIC8vIFByZXZlbnQgbmV2ZXItZW5kaW5nIGxvb3BcbiAgICAgICAgaWYgKHRhcmdldCA9PT0gY29weSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRlZXAgJiYgY29weSAmJiAhXy5pc0Z1bmN0aW9uKGNvcHkpICYmIF8uaXNPYmplY3QoY29weSkgJiYgKChjb3B5X2lzX2FycmF5ID0gXy5pc0FycmF5KGNvcHkpKSB8fCAhXy5oYXMoY29weSwgJ2FwaU5hbWUnKSkpIHtcbiAgICAgICAgICAvLyBSZWN1cnNlIGlmIHdlJ3JlIG1lcmdpbmcgcGxhaW4gb2JqZWN0cyBvciBhcnJheXNcbiAgICAgICAgICBpZiAoY29weV9pc19hcnJheSkge1xuICAgICAgICAgICAgY29weV9pc19hcnJheSA9IGZhbHNlO1xuICAgICAgICAgICAgY2xvbmUgPSBzcmMgJiYgXy5pc0FycmF5KHNyYykgPyBzcmMgOiBbXTtcbiAgICAgICAgICB9IGVsc2UgaWYgKF8uaXNEYXRlKGNvcHkpKSB7XG4gICAgICAgICAgICBjbG9uZSA9IG5ldyBEYXRlKGNvcHkudmFsdWVPZigpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2xvbmUgPSBzcmMgJiYgXy5pc09iamVjdChzcmMpID8gc3JjIDoge307XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gTmV2ZXIgbW92ZSBvcmlnaW5hbCBvYmplY3RzLCBjbG9uZSB0aGVtXG4gICAgICAgICAgdGFyZ2V0W25hbWVdID0gZXhwb3J0cy5kZWVwRXh0ZW5kKGRlZXAsIGNsb25lLCBjb3B5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0YXJnZXRbbmFtZV0gPSBjb3B5O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gUmV0dXJuIHRoZSBtb2RpZmllZCBvYmplY3RcbiAgcmV0dXJuIHRhcmdldDtcbn07Il0sInNvdXJjZVJvb3QiOiJkOlxcR0lBTlRcXHd3MlxcYmMtZGVidWdcXGluZXR0aWJlYWNvblxcUmVzb3VyY2VzXFxhbmRyb2lkIn0=
